(gdb) disas main
Dump of assembler code for function main:
   0x0000000000400ff8 <+0>:	push   %rbp
   0x0000000000400ff9 <+1>:	mov    %rsp,%rbp
   0x0000000000400ffc <+4>:	sub    $0xa0,%rsp
   0x0000000000401003 <+11>:	mov    %edi,-0x94(%rbp)
   0x0000000000401009 <+17>:	mov    %rsi,-0xa0(%rbp)
   0x0000000000401010 <+24>:	mov    %fs:0x28,%rax
   0x0000000000401019 <+33>:	mov    %rax,-0x8(%rbp)
   0x000000000040101d <+37>:	xor    %eax,%eax
   0x000000000040101f <+39>:	mov    $0x4011e6,%edi
   0x0000000000401024 <+44>:	mov    $0x0,%eax
   0x0000000000401029 <+49>:	callq  0x400690 <printf@plt>
   0x000000000040102e <+54>:	mov    0x2010ab(%rip),%rax        # 0x6020e0 <stdout@@GLIBC_2.2.5>
   0x0000000000401035 <+61>:	mov    %rax,%rdi
   0x0000000000401038 <+64>:	callq  0x4006d0 <fflush@plt>
   0x000000000040103d <+69>:	mov    0x2010ac(%rip),%rdx        # 0x6020f0 <stdin@@GLIBC_2.2.5>
   0x0000000000401044 <+76>:	lea    -0x90(%rbp),%rax
   0x000000000040104b <+83>:	mov    $0x21,%esi
   0x0000000000401050 <+88>:	mov    %rax,%rdi
   0x0000000000401053 <+91>:	callq  0x4006c0 <fgets@plt>
   0x0000000000401058 <+96>:	lea    -0x90(%rbp),%rax
   0x000000000040105f <+103>:	mov    $0x4011ed,%esi
   0x0000000000401064 <+108>:	mov    %rax,%rdi
   0x0000000000401067 <+111>:	callq  0x4006a0 <strcspn@plt>
   0x000000000040106c <+116>:	movb   $0x0,-0x90(%rbp,%rax,1)
   0x0000000000401074 <+124>:	mov    $0x4011ef,%edi
   0x0000000000401079 <+129>:	mov    $0x0,%eax
   0x000000000040107e <+134>:	callq  0x400690 <printf@plt>
   0x0000000000401083 <+139>:	mov    0x201056(%rip),%rax        # 0x6020e0 <stdout@@GLIBC_2.2.5>
   0x000000000040108a <+146>:	mov    %rax,%rdi
   0x000000000040108d <+149>:	callq  0x4006d0 <fflush@plt>
   0x0000000000401092 <+154>:	mov    0x201057(%rip),%rdx        # 0x6020f0 <stdin@@GLIBC_2.2.5>
   0x0000000000401099 <+161>:	lea    -0x60(%rbp),%rax
   0x000000000040109d <+165>:	mov    $0x21,%esi
   0x00000000004010a2 <+170>:	mov    %rax,%rdi
   0x00000000004010a5 <+173>:	callq  0x4006c0 <fgets@plt>
   0x00000000004010aa <+178>:	lea    -0x60(%rbp),%rax
   0x00000000004010ae <+182>:	mov    $0x4011ed,%esi
   0x00000000004010b3 <+187>:	mov    %rax,%rdi
   0x00000000004010b6 <+190>:	callq  0x4006a0 <strcspn@plt>
   0x00000000004010bb <+195>:	movb   $0x0,-0x60(%rbp,%rax,1)
   0x00000000004010c0 <+200>:	mov    $0x4011f7,%edi
   0x00000000004010c5 <+205>:	mov    $0x0,%eax
   0x00000000004010ca <+210>:	callq  0x400690 <printf@plt>
   0x00000000004010cf <+215>:	mov    0x20100a(%rip),%rax        # 0x6020e0 <stdout@@GLIBC_2.2.5>
   0x00000000004010d6 <+222>:	mov    %rax,%rdi
   0x00000000004010d9 <+225>:	callq  0x4006d0 <fflush@plt>
   0x00000000004010de <+230>:	mov    0x20100b(%rip),%rdx        # 0x6020f0 <stdin@@GLIBC_2.2.5>
   0x00000000004010e5 <+237>:	lea    -0x30(%rbp),%rax
   0x00000000004010e9 <+241>:	mov    $0x21,%esi
   0x00000000004010ee <+246>:	mov    %rax,%rdi
   0x00000000004010f1 <+249>:	callq  0x4006c0 <fgets@plt>
   0x00000000004010f6 <+254>:	lea    -0x30(%rbp),%rax
   0x00000000004010fa <+258>:	mov    $0x4011ed,%esi
   0x00000000004010ff <+263>:	mov    %rax,%rdi
   0x0000000000401102 <+266>:	callq  0x4006a0 <strcspn@plt>
   0x0000000000401107 <+271>:	movb   $0x0,-0x30(%rbp,%rax,1)
   0x000000000040110c <+276>:	lea    -0x30(%rbp),%rdx
   0x0000000000401110 <+280>:	lea    -0x60(%rbp),%rcx
   0x0000000000401114 <+284>:	lea    -0x90(%rbp),%rax
   0x000000000040111b <+291>:	mov    %rcx,%rsi
   0x000000000040111e <+294>:	mov    %rax,%rdi
   0x0000000000401121 <+297>:	callq  0x400932 <verify_key>
   0x0000000000401126 <+302>:	test   %al,%al
   0x0000000000401128 <+304>:	je     0x40113b <main+323>
   0x000000000040112a <+306>:	mov    $0x401205,%edi
   0x000000000040112f <+311>:	callq  0x400660 <puts@plt>
   0x0000000000401134 <+316>:	mov    $0x0,%eax
   0x0000000000401139 <+321>:	jmp    0x40114a <main+338>
   0x000000000040113b <+323>:	mov    $0x401220,%edi
   0x0000000000401140 <+328>:	callq  0x400660 <puts@plt>
   0x0000000000401145 <+333>:	mov    $0xffffffff,%eax
   0x000000000040114a <+338>:	mov    -0x8(%rbp),%rcx
   0x000000000040114e <+342>:	xor    %fs:0x28,%rcx
   0x0000000000401157 <+351>:	je     0x40115e <main+358>
   0x0000000000401159 <+353>:	callq  0x400680 <__stack_chk_fail@plt>
   0x000000000040115e <+358>:	leaveq 
   0x000000000040115f <+359>:	retq   
End of assembler dump.

(gdb) disas verify_key
Dump of assembler code for function verify_key:
   0x0000000000400932 <+0>:	push   %rbp
   0x0000000000400933 <+1>:	mov    %rsp,%rbp
   0x0000000000400936 <+4>:	push   %rbx
   0x0000000000400937 <+5>:	sub    $0xe8,%rsp
   0x000000000040093e <+12>:	mov    %rdi,-0xd8(%rbp)
   0x0000000000400945 <+19>:	mov    %rsi,-0xe0(%rbp)
   0x000000000040094c <+26>:	mov    %rdx,-0xe8(%rbp)
   0x0000000000400953 <+33>:	mov    %fs:0x28,%rax
   0x000000000040095c <+42>:	mov    %rax,-0x18(%rbp)
   0x0000000000400960 <+46>:	xor    %eax,%eax
   0x0000000000400962 <+48>:	movl   $0x0,-0xc8(%rbp)
   0x000000000040096c <+58>:	mov    -0xe8(%rbp),%rax
   0x0000000000400973 <+65>:	mov    $0x4011e4,%esi
   0x0000000000400978 <+70>:	mov    %rax,%rdi
   0x000000000040097b <+73>:	callq  0x4006e0 <strtok@plt>
   0x0000000000400980 <+78>:	mov    %rax,-0x90(%rbp)
   0x0000000000400987 <+85>:	jmp    0x4009c6 <verify_key+148>
   0x0000000000400989 <+87>:	mov    -0xc8(%rbp),%ebx
   0x000000000040098f <+93>:	lea    0x1(%rbx),%eax
   0x0000000000400992 <+96>:	mov    %eax,-0xc8(%rbp)
   0x0000000000400998 <+102>:	mov    -0x90(%rbp),%rax
   0x000000000040099f <+109>:	mov    %rax,%rdi
   0x00000000004009a2 <+112>:	callq  0x4006f0 <atoi@plt>
   0x00000000004009a7 <+117>:	mov    %eax,%edx
   0x00000000004009a9 <+119>:	movslq %ebx,%rax
   0x00000000004009ac <+122>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x00000000004009b0 <+126>:	mov    $0x4011e4,%esi
   0x00000000004009b5 <+131>:	mov    $0x0,%edi
   0x00000000004009ba <+136>:	callq  0x4006e0 <strtok@plt>
   0x00000000004009bf <+141>:	mov    %rax,-0x90(%rbp)
   0x00000000004009c6 <+148>:	cmpq   $0x0,-0x90(%rbp)
   0x00000000004009ce <+156>:	jne    0x400989 <verify_key+87>
   0x00000000004009d0 <+158>:	cmpl   $0x6,-0xc8(%rbp)
   0x00000000004009d7 <+165>:	je     0x4009e3 <verify_key+177>
   0x00000000004009d9 <+167>:	mov    $0x0,%eax
   0x00000000004009de <+172>:	jmpq   0x400fda <verify_key+1704>
   0x00000000004009e3 <+177>:	movl   $0x0,-0xc4(%rbp)
   0x00000000004009ed <+187>:	mov    -0xe0(%rbp),%rax
   0x00000000004009f4 <+194>:	mov    %rax,-0x80(%rbp)
   0x00000000004009f8 <+198>:	mov    -0xd8(%rbp),%rax
   0x00000000004009ff <+205>:	mov    %rax,-0x78(%rbp)
   0x0000000000400a03 <+209>:	movl   $0x0,-0xc0(%rbp)
   0x0000000000400a0d <+219>:	jmpq   0x400ad4 <verify_key+418>
   0x0000000000400a12 <+224>:	mov    -0xc0(%rbp),%eax
   0x0000000000400a18 <+230>:	cltq   
   0x0000000000400a1a <+232>:	mov    -0x80(%rbp,%rax,8),%rax
   0x0000000000400a1f <+237>:	mov    %rax,-0x88(%rbp)
   0x0000000000400a26 <+244>:	mov    -0x88(%rbp),%rax
   0x0000000000400a2d <+251>:	mov    %rax,%rdi
   0x0000000000400a30 <+254>:	callq  0x400670 <strlen@plt>
   0x0000000000400a35 <+259>:	mov    %eax,-0xa0(%rbp)
   0x0000000000400a3b <+265>:	cmpl   $0x1f,-0xa0(%rbp)
   0x0000000000400a42 <+272>:	jg     0x400acd <verify_key+411>
   0x0000000000400a48 <+278>:	mov    $0x20,%eax
   0x0000000000400a4d <+283>:	sub    -0xa0(%rbp),%eax
   0x0000000000400a53 <+289>:	mov    %eax,-0x9c(%rbp)
   0x0000000000400a59 <+295>:	movl   $0x0,-0xbc(%rbp)
   0x0000000000400a63 <+305>:	jmp    0x400aa0 <verify_key+366>
   0x0000000000400a65 <+307>:	mov    -0xa0(%rbp),%edx
   0x0000000000400a6b <+313>:	mov    -0xbc(%rbp),%eax
   0x0000000000400a71 <+319>:	add    %edx,%eax
   0x0000000000400a73 <+321>:	movslq %eax,%rdx
   0x0000000000400a76 <+324>:	mov    -0x88(%rbp),%rax
   0x0000000000400a7d <+331>:	add    %rax,%rdx
   0x0000000000400a80 <+334>:	mov    -0xc4(%rbp),%ecx
   0x0000000000400a86 <+340>:	mov    -0xbc(%rbp),%eax
   0x0000000000400a8c <+346>:	add    %ecx,%eax
   0x0000000000400a8e <+348>:	cltq   
   0x0000000000400a90 <+350>:	movzbl 0x6020a0(%rax),%eax
   0x0000000000400a97 <+357>:	mov    %al,(%rdx)
   0x0000000000400a99 <+359>:	addl   $0x1,-0xbc(%rbp)
   0x0000000000400aa0 <+366>:	mov    -0xbc(%rbp),%eax
   0x0000000000400aa6 <+372>:	cmp    -0x9c(%rbp),%eax
   0x0000000000400aac <+378>:	jl     0x400a65 <verify_key+307>
   0x0000000000400aae <+380>:	mov    $0x20,%eax
   0x0000000000400ab3 <+385>:	sub    -0xa0(%rbp),%eax
   0x0000000000400ab9 <+391>:	mov    %eax,-0xc4(%rbp)
   0x0000000000400abf <+397>:	mov    -0x88(%rbp),%rax
   0x0000000000400ac6 <+404>:	add    $0x20,%rax
   0x0000000000400aca <+408>:	movb   $0x0,(%rax)
   0x0000000000400acd <+411>:	addl   $0x1,-0xc0(%rbp)
   0x0000000000400ad4 <+418>:	cmpl   $0x1,-0xc0(%rbp)
   0x0000000000400adb <+425>:	jle    0x400a12 <verify_key+224>
   0x0000000000400ae1 <+431>:	movl   $0x0,-0xb8(%rbp)
   0x0000000000400aeb <+441>:	jmp    0x400b50 <verify_key+542>
   0x0000000000400aed <+443>:	mov    -0xb8(%rbp),%eax
   0x0000000000400af3 <+449>:	movslq %eax,%rdx
   0x0000000000400af6 <+452>:	mov    -0xe0(%rbp),%rax
   0x0000000000400afd <+459>:	add    %rdx,%rax
   0x0000000000400b00 <+462>:	mov    -0xb8(%rbp),%edx
   0x0000000000400b06 <+468>:	movslq %edx,%rcx
   0x0000000000400b09 <+471>:	mov    -0xe0(%rbp),%rdx
   0x0000000000400b10 <+478>:	add    %rcx,%rdx
   0x0000000000400b13 <+481>:	movzbl (%rdx),%edx
   0x0000000000400b16 <+484>:	xor    $0x5,%edx
   0x0000000000400b19 <+487>:	mov    %dl,(%rax)
   0x0000000000400b1b <+489>:	mov    -0xb8(%rbp),%eax
   0x0000000000400b21 <+495>:	movslq %eax,%rdx
   0x0000000000400b24 <+498>:	mov    -0xd8(%rbp),%rax
   0x0000000000400b2b <+505>:	add    %rdx,%rax
   0x0000000000400b2e <+508>:	mov    -0xb8(%rbp),%edx
   0x0000000000400b34 <+514>:	movslq %edx,%rcx
   0x0000000000400b37 <+517>:	mov    -0xd8(%rbp),%rdx
   0x0000000000400b3e <+524>:	add    %rcx,%rdx
   0x0000000000400b41 <+527>:	movzbl (%rdx),%edx
   0x0000000000400b44 <+530>:	xor    $0xf,%edx
   0x0000000000400b47 <+533>:	mov    %dl,(%rax)
   0x0000000000400b49 <+535>:	addl   $0x1,-0xb8(%rbp)
   0x0000000000400b50 <+542>:	cmpl   $0x1f,-0xb8(%rbp)
   0x0000000000400b57 <+549>:	jle    0x400aed <verify_key+443>
   0x0000000000400b59 <+551>:	movl   $0x0,-0xb4(%rbp)
   0x0000000000400b63 <+561>:	jmpq   0x400c74 <verify_key+834>
   0x0000000000400b68 <+566>:	mov    -0xb4(%rbp),%eax
   0x0000000000400b6e <+572>:	lea    0x2(%rax),%edx
   0x0000000000400b71 <+575>:	mov    -0xe0(%rbp),%rax
   0x0000000000400b78 <+582>:	mov    %edx,%ecx
   0x0000000000400b7a <+584>:	mov    $0x20,%edx
   0x0000000000400b7f <+589>:	mov    $0x0,%esi
   0x0000000000400b84 <+594>:	mov    %rax,%rdi
   0x0000000000400b87 <+597>:	callq  0x4008e9 <sumChars>
   0x0000000000400b8c <+602>:	mov    %eax,-0x98(%rbp)
   0x0000000000400b92 <+608>:	mov    -0xb4(%rbp),%eax
   0x0000000000400b98 <+614>:	lea    0x2(%rax),%edx
   0x0000000000400b9b <+617>:	mov    -0xb4(%rbp),%eax
   0x0000000000400ba1 <+623>:	lea    0x1(%rax),%esi
   0x0000000000400ba4 <+626>:	mov    -0xe0(%rbp),%rax
   0x0000000000400bab <+633>:	mov    %edx,%ecx
   0x0000000000400bad <+635>:	mov    $0x20,%edx
   0x0000000000400bb2 <+640>:	mov    %rax,%rdi
   0x0000000000400bb5 <+643>:	callq  0x4008e9 <sumChars>
   0x0000000000400bba <+648>:	mov    %eax,-0x94(%rbp)
   0x0000000000400bc0 <+654>:	mov    -0xb4(%rbp),%eax
   0x0000000000400bc6 <+660>:	cltq   
   0x0000000000400bc8 <+662>:	mov    -0x70(%rbp,%rax,4),%esi
   0x0000000000400bcc <+666>:	mov    -0x98(%rbp),%eax
   0x0000000000400bd2 <+672>:	imul   -0x94(%rbp),%eax
   0x0000000000400bd9 <+679>:	mov    %eax,%ecx
   0x0000000000400bdb <+681>:	mov    $0x68db8bad,%edx
   0x0000000000400be0 <+686>:	mov    %ecx,%eax
   0x0000000000400be2 <+688>:	imul   %edx
   0x0000000000400be4 <+690>:	sar    $0xc,%edx
   0x0000000000400be7 <+693>:	mov    %ecx,%eax
   0x0000000000400be9 <+695>:	sar    $0x1f,%eax
   0x0000000000400bec <+698>:	sub    %eax,%edx
   0x0000000000400bee <+700>:	mov    %edx,%eax
   0x0000000000400bf0 <+702>:	imul   $0x2710,%eax,%eax
   0x0000000000400bf6 <+708>:	sub    %eax,%ecx
   0x0000000000400bf8 <+710>:	mov    %ecx,%eax
   0x0000000000400bfa <+712>:	sub    %eax,%esi
   0x0000000000400bfc <+714>:	mov    %esi,%edx
   0x0000000000400bfe <+716>:	mov    -0xb4(%rbp),%eax
   0x0000000000400c04 <+722>:	cltq   
   0x0000000000400c06 <+724>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x0000000000400c0a <+728>:	mov    -0xd8(%rbp),%rax
   0x0000000000400c11 <+735>:	mov    $0x2,%ecx
   0x0000000000400c16 <+740>:	mov    $0x20,%edx
   0x0000000000400c1b <+745>:	mov    $0x0,%esi
   0x0000000000400c20 <+750>:	mov    %rax,%rdi
   0x0000000000400c23 <+753>:	callq  0x4008e9 <sumChars>
   0x0000000000400c28 <+758>:	mov    %eax,%ebx
   0x0000000000400c2a <+760>:	mov    -0xd8(%rbp),%rax
   0x0000000000400c31 <+767>:	mov    $0x2,%ecx
   0x0000000000400c36 <+772>:	mov    $0x20,%edx
   0x0000000000400c3b <+777>:	mov    $0x1,%esi
   0x0000000000400c40 <+782>:	mov    %rax,%rdi
   0x0000000000400c43 <+785>:	callq  0x4008e9 <sumChars>
   0x0000000000400c48 <+790>:	sub    %eax,%ebx
   0x0000000000400c4a <+792>:	mov    %ebx,%eax
   0x0000000000400c4c <+794>:	lea    0x0(,%rax,4),%edx
   0x0000000000400c53 <+801>:	mov    -0xb4(%rbp),%eax
   0x0000000000400c59 <+807>:	cltq   
   0x0000000000400c5b <+809>:	mov    -0x70(%rbp,%rax,4),%eax
   0x0000000000400c5f <+813>:	add    %eax,%edx
   0x0000000000400c61 <+815>:	mov    -0xb4(%rbp),%eax
   0x0000000000400c67 <+821>:	cltq   
   0x0000000000400c69 <+823>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x0000000000400c6d <+827>:	addl   $0x1,-0xb4(%rbp)
   0x0000000000400c74 <+834>:	cmpl   $0x5,-0xb4(%rbp)
   0x0000000000400c7b <+841>:	jle    0x400b68 <verify_key+566>
   0x0000000000400c81 <+847>:	lea    -0x70(%rbp),%rax
   0x0000000000400c85 <+851>:	mov    $0x4,%edx
   0x0000000000400c8a <+856>:	mov    $0x3,%esi
   0x0000000000400c8f <+861>:	mov    %rax,%rdi
   0x0000000000400c92 <+864>:	callq  0x400806 <swapArr>
   0x0000000000400c97 <+869>:	lea    -0x70(%rbp),%rax
   0x0000000000400c9b <+873>:	mov    $0x5,%edx
   0x0000000000400ca0 <+878>:	mov    $0x2,%esi
   0x0000000000400ca5 <+883>:	mov    %rax,%rdi
   0x0000000000400ca8 <+886>:	callq  0x400806 <swapArr>
   0x0000000000400cad <+891>:	lea    -0x70(%rbp),%rax
   0x0000000000400cb1 <+895>:	mov    $0x5,%edx
   0x0000000000400cb6 <+900>:	mov    $0x1,%esi
   0x0000000000400cbb <+905>:	mov    %rax,%rdi
   0x0000000000400cbe <+908>:	callq  0x400806 <swapArr>
   0x0000000000400cc3 <+913>:	lea    -0x70(%rbp),%rax
   0x0000000000400cc7 <+917>:	mov    $0x3,%edx
   0x0000000000400ccc <+922>:	mov    $0x2,%esi
   0x0000000000400cd1 <+927>:	mov    %rax,%rdi
   0x0000000000400cd4 <+930>:	callq  0x400806 <swapArr>
   0x0000000000400cd9 <+935>:	lea    -0x70(%rbp),%rax
   0x0000000000400cdd <+939>:	mov    $0x5,%edx
   0x0000000000400ce2 <+944>:	mov    $0x0,%esi
   0x0000000000400ce7 <+949>:	mov    %rax,%rdi
   0x0000000000400cea <+952>:	callq  0x400806 <swapArr>
   0x0000000000400cef <+957>:	lea    -0x70(%rbp),%rax
   0x0000000000400cf3 <+961>:	mov    $0x5,%edx
   0x0000000000400cf8 <+966>:	mov    $0x4,%esi
   0x0000000000400cfd <+971>:	mov    %rax,%rdi
   0x0000000000400d00 <+974>:	callq  0x400806 <swapArr>
   0x0000000000400d05 <+979>:	movl   $0x0,-0xb0(%rbp)
   0x0000000000400d0f <+989>:	jmp    0x400d8c <verify_key+1114>
   0x0000000000400d11 <+991>:	mov    -0xd8(%rbp),%rax
   0x0000000000400d18 <+998>:	mov    $0x1,%ecx
   0x0000000000400d1d <+1003>:	mov    $0x20,%edx
   0x0000000000400d22 <+1008>:	mov    $0x0,%esi
   0x0000000000400d27 <+1013>:	mov    %rax,%rdi
   0x0000000000400d2a <+1016>:	callq  0x4008e9 <sumChars>
   0x0000000000400d2f <+1021>:	mov    %eax,%edx
   0x0000000000400d31 <+1023>:	mov    -0xb0(%rbp),%eax
   0x0000000000400d37 <+1029>:	cltq   
   0x0000000000400d39 <+1031>:	mov    -0x70(%rbp,%rax,4),%eax
   0x0000000000400d3d <+1035>:	add    %eax,%edx
   0x0000000000400d3f <+1037>:	mov    -0xb0(%rbp),%eax
   0x0000000000400d45 <+1043>:	cltq   
   0x0000000000400d47 <+1045>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x0000000000400d4b <+1049>:	mov    -0xe0(%rbp),%rax
   0x0000000000400d52 <+1056>:	mov    $0x1,%ecx
   0x0000000000400d57 <+1061>:	mov    $0x20,%edx
   0x0000000000400d5c <+1066>:	mov    $0x0,%esi
   0x0000000000400d61 <+1071>:	mov    %rax,%rdi
   0x0000000000400d64 <+1074>:	callq  0x4008e9 <sumChars>
   0x0000000000400d69 <+1079>:	mov    %eax,%edx
   0x0000000000400d6b <+1081>:	mov    -0xb0(%rbp),%eax
   0x0000000000400d71 <+1087>:	cltq   
   0x0000000000400d73 <+1089>:	mov    -0x70(%rbp,%rax,4),%eax
   0x0000000000400d77 <+1093>:	add    %eax,%edx
   0x0000000000400d79 <+1095>:	mov    -0xb0(%rbp),%eax
   0x0000000000400d7f <+1101>:	cltq   
   0x0000000000400d81 <+1103>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x0000000000400d85 <+1107>:	addl   $0x1,-0xb0(%rbp)
   0x0000000000400d8c <+1114>:	cmpl   $0x5,-0xb0(%rbp)
   0x0000000000400d93 <+1121>:	jle    0x400d11 <verify_key+991>
   0x0000000000400d99 <+1127>:	movl   $0x0,-0xac(%rbp)
   0x0000000000400da3 <+1137>:	jmpq   0x400e2b <verify_key+1273>
   0x0000000000400da8 <+1142>:	mov    -0xac(%rbp),%eax
   0x0000000000400dae <+1148>:	shl    $0x2,%eax
   0x0000000000400db1 <+1151>:	lea    0x1(%rax),%edx
   0x0000000000400db4 <+1154>:	mov    -0xac(%rbp),%eax
   0x0000000000400dba <+1160>:	lea    0x0(,%rax,4),%esi
   0x0000000000400dc1 <+1167>:	mov    -0xe0(%rbp),%rax
   0x0000000000400dc8 <+1174>:	mov    $0x1,%ecx
   0x0000000000400dcd <+1179>:	mov    %rax,%rdi
   0x0000000000400dd0 <+1182>:	callq  0x4008e9 <sumChars>
   0x0000000000400dd5 <+1187>:	mov    %eax,%ebx
   0x0000000000400dd7 <+1189>:	mov    -0xac(%rbp),%eax
   0x0000000000400ddd <+1195>:	shl    $0x2,%eax
   0x0000000000400de0 <+1198>:	lea    0x3(%rax),%edx
   0x0000000000400de3 <+1201>:	mov    -0xac(%rbp),%eax
   0x0000000000400de9 <+1207>:	shl    $0x2,%eax
   0x0000000000400dec <+1210>:	lea    0x2(%rax),%esi
   0x0000000000400def <+1213>:	mov    -0xd8(%rbp),%rax
   0x0000000000400df6 <+1220>:	mov    $0x1,%ecx
   0x0000000000400dfb <+1225>:	mov    %rax,%rdi
   0x0000000000400dfe <+1228>:	callq  0x4008e9 <sumChars>
   0x0000000000400e03 <+1233>:	mov    %eax,%ecx
   0x0000000000400e05 <+1235>:	mov    %ebx,%eax
   0x0000000000400e07 <+1237>:	cltd   
   0x0000000000400e08 <+1238>:	idiv   %ecx
   0x0000000000400e0a <+1240>:	mov    -0xac(%rbp),%eax
   0x0000000000400e10 <+1246>:	cltq   
   0x0000000000400e12 <+1248>:	mov    -0x70(%rbp,%rax,4),%eax
   0x0000000000400e16 <+1252>:	add    %eax,%edx
   0x0000000000400e18 <+1254>:	mov    -0xac(%rbp),%eax
   0x0000000000400e1e <+1260>:	cltq   
   0x0000000000400e20 <+1262>:	mov    %edx,-0x70(%rbp,%rax,4)
   0x0000000000400e24 <+1266>:	addl   $0x1,-0xac(%rbp)
   0x0000000000400e2b <+1273>:	cmpl   $0x5,-0xac(%rbp)
   0x0000000000400e32 <+1280>:	jle    0x400da8 <verify_key+1142>
   0x0000000000400e38 <+1286>:	movl   $0x2,-0x50(%rbp)
   0x0000000000400e3f <+1293>:	movl   $0x4,-0x4c(%rbp)
   0x0000000000400e46 <+1300>:	movl   $0x6,-0x48(%rbp)
   0x0000000000400e4d <+1307>:	movl   $0x8,-0x44(%rbp)
   0x0000000000400e54 <+1314>:	movl   $0x7,-0x40(%rbp)
   0x0000000000400e5b <+1321>:	movl   $0x5,-0x3c(%rbp)
   0x0000000000400e62 <+1328>:	mov    -0xe0(%rbp),%rax
   0x0000000000400e69 <+1335>:	mov    $0x1,%ecx
   0x0000000000400e6e <+1340>:	mov    $0xa,%edx
   0x0000000000400e73 <+1345>:	mov    $0x0,%esi
   0x0000000000400e78 <+1350>:	mov    %rax,%rdi
   0x0000000000400e7b <+1353>:	callq  0x4008e9 <sumChars>
   0x0000000000400e80 <+1358>:	mov    %eax,-0x30(%rbp)
   0x0000000000400e83 <+1361>:	mov    -0xe0(%rbp),%rax
   0x0000000000400e8a <+1368>:	mov    $0x1,%ecx
   0x0000000000400e8f <+1373>:	mov    $0x19,%edx
   0x0000000000400e94 <+1378>:	mov    $0xa,%esi
   0x0000000000400e99 <+1383>:	mov    %rax,%rdi
   0x0000000000400e9c <+1386>:	callq  0x4008e9 <sumChars>
   0x0000000000400ea1 <+1391>:	mov    %eax,-0x2c(%rbp)
   0x0000000000400ea4 <+1394>:	mov    -0xe0(%rbp),%rax
   0x0000000000400eab <+1401>:	mov    $0x1,%ecx
   0x0000000000400eb0 <+1406>:	mov    $0x20,%edx
   0x0000000000400eb5 <+1411>:	mov    $0x19,%esi
   0x0000000000400eba <+1416>:	mov    %rax,%rdi
   0x0000000000400ebd <+1419>:	callq  0x4008e9 <sumChars>
   0x0000000000400ec2 <+1424>:	mov    %eax,-0x28(%rbp)
   0x0000000000400ec5 <+1427>:	mov    -0xd8(%rbp),%rax
   0x0000000000400ecc <+1434>:	mov    $0x1,%ecx
   0x0000000000400ed1 <+1439>:	mov    $0xd,%edx
   0x0000000000400ed6 <+1444>:	mov    $0x0,%esi
   0x0000000000400edb <+1449>:	mov    %rax,%rdi
   0x0000000000400ede <+1452>:	callq  0x4008e9 <sumChars>
   0x0000000000400ee3 <+1457>:	mov    %eax,-0x24(%rbp)
   0x0000000000400ee6 <+1460>:	mov    -0xd8(%rbp),%rax
   0x0000000000400eed <+1467>:	mov    $0x1,%ecx
   0x0000000000400ef2 <+1472>:	mov    $0x14,%edx
   0x0000000000400ef7 <+1477>:	mov    $0xd,%esi
   0x0000000000400efc <+1482>:	mov    %rax,%rdi
   0x0000000000400eff <+1485>:	callq  0x4008e9 <sumChars>
   0x0000000000400f04 <+1490>:	mov    %eax,-0x20(%rbp)
   0x0000000000400f07 <+1493>:	mov    -0xd8(%rbp),%rax
   0x0000000000400f0e <+1500>:	mov    $0x1,%ecx
   0x0000000000400f13 <+1505>:	mov    $0x20,%edx
   0x0000000000400f18 <+1510>:	mov    $0x14,%esi
   0x0000000000400f1d <+1515>:	mov    %rax,%rdi
   0x0000000000400f20 <+1518>:	callq  0x4008e9 <sumChars>
   0x0000000000400f25 <+1523>:	mov    %eax,-0x1c(%rbp)
   0x0000000000400f28 <+1526>:	movl   $0x0,-0xa8(%rbp)
   0x0000000000400f32 <+1536>:	jmp    0x400f84 <verify_key+1618>
   0x0000000000400f34 <+1538>:	mov    -0xa8(%rbp),%eax
   0x0000000000400f3a <+1544>:	cltq   
   0x0000000000400f3c <+1546>:	mov    -0x50(%rbp,%rax,4),%edx
   0x0000000000400f40 <+1550>:	mov    -0xa8(%rbp),%eax
   0x0000000000400f46 <+1556>:	cltq   
   0x0000000000400f48 <+1558>:	mov    -0x30(%rbp,%rax,4),%eax
   0x0000000000400f4c <+1562>:	mov    %edx,%ecx
   0x0000000000400f4e <+1564>:	imul   %eax,%ecx
   0x0000000000400f51 <+1567>:	mov    $0x68db8bad,%edx
   0x0000000000400f56 <+1572>:	mov    %ecx,%eax
   0x0000000000400f58 <+1574>:	imul   %edx
   0x0000000000400f5a <+1576>:	sar    $0xc,%edx
   0x0000000000400f5d <+1579>:	mov    %ecx,%eax
   0x0000000000400f5f <+1581>:	sar    $0x1f,%eax
   0x0000000000400f62 <+1584>:	sub    %eax,%edx
   0x0000000000400f64 <+1586>:	mov    %edx,%eax
   0x0000000000400f66 <+1588>:	imul   $0x2710,%eax,%eax
   0x0000000000400f6c <+1594>:	sub    %eax,%ecx
   0x0000000000400f6e <+1596>:	mov    %ecx,%eax
   0x0000000000400f70 <+1598>:	mov    -0xa8(%rbp),%edx
   0x0000000000400f76 <+1604>:	movslq %edx,%rdx
   0x0000000000400f79 <+1607>:	mov    %eax,-0x30(%rbp,%rdx,4)
   0x0000000000400f7d <+1611>:	addl   $0x1,-0xa8(%rbp)
   0x0000000000400f84 <+1618>:	cmpl   $0x5,-0xa8(%rbp)
   0x0000000000400f8b <+1625>:	jle    0x400f34 <verify_key+1538>
   0x0000000000400f8d <+1627>:	movb   $0x1,-0xc9(%rbp)
   0x0000000000400f94 <+1634>:	movl   $0x0,-0xa4(%rbp)
   0x0000000000400f9e <+1644>:	jmp    0x400fca <verify_key+1688>
   0x0000000000400fa0 <+1646>:	mov    -0xa4(%rbp),%eax
   0x0000000000400fa6 <+1652>:	cltq   
   0x0000000000400fa8 <+1654>:	mov    -0x70(%rbp,%rax,4),%edx
   0x0000000000400fac <+1658>:	mov    -0xa4(%rbp),%eax
   0x0000000000400fb2 <+1664>:	cltq   
   0x0000000000400fb4 <+1666>:	mov    -0x30(%rbp,%rax,4),%eax
   0x0000000000400fb8 <+1670>:	cmp    %eax,%edx
   0x0000000000400fba <+1672>:	je     0x400fc3 <verify_key+1681>
   0x0000000000400fbc <+1674>:	movb   $0x0,-0xc9(%rbp)
   0x0000000000400fc3 <+1681>:	addl   $0x1,-0xa4(%rbp)
   0x0000000000400fca <+1688>:	cmpl   $0x5,-0xa4(%rbp)
   0x0000000000400fd1 <+1695>:	jle    0x400fa0 <verify_key+1646>
   0x0000000000400fd3 <+1697>:	movzbl -0xc9(%rbp),%eax
   0x0000000000400fda <+1704>:	mov    -0x18(%rbp),%rbx
   0x0000000000400fde <+1708>:	xor    %fs:0x28,%rbx
   0x0000000000400fe7 <+1717>:	je     0x400fee <verify_key+1724>
   0x0000000000400fe9 <+1719>:	callq  0x400680 <__stack_chk_fail@plt>
   0x0000000000400fee <+1724>:	add    $0xe8,%rsp
   0x0000000000400ff5 <+1731>:	pop    %rbx
   0x0000000000400ff6 <+1732>:	pop    %rbp
   0x0000000000400ff7 <+1733>:	retq   
End of assembler dump.

(gdb) disas sumChars
Dump of assembler code for function sumChars:
   0x00000000004008e9 <+0>:	push   %rbp
   0x00000000004008ea <+1>:	mov    %rsp,%rbp
   0x00000000004008ed <+4>:	mov    %rdi,-0x18(%rbp)
   0x00000000004008f1 <+8>:	mov    %esi,-0x1c(%rbp)
   0x00000000004008f4 <+11>:	mov    %edx,-0x20(%rbp)
   0x00000000004008f7 <+14>:	mov    %ecx,-0x24(%rbp)
   0x00000000004008fa <+17>:	movl   $0x0,-0x8(%rbp)
   0x0000000000400901 <+24>:	mov    -0x1c(%rbp),%eax
   0x0000000000400904 <+27>:	mov    %eax,-0x4(%rbp)
   0x0000000000400907 <+30>:	jmp    0x400925 <sumChars+60>
   0x0000000000400909 <+32>:	mov    -0x4(%rbp),%eax
   0x000000000040090c <+35>:	movslq %eax,%rdx
   0x000000000040090f <+38>:	mov    -0x18(%rbp),%rax
   0x0000000000400913 <+42>:	add    %rdx,%rax
   0x0000000000400916 <+45>:	movzbl (%rax),%eax
   0x0000000000400919 <+48>:	movsbl %al,%eax
   0x000000000040091c <+51>:	add    %eax,-0x8(%rbp)
   0x000000000040091f <+54>:	mov    -0x24(%rbp),%eax
   0x0000000000400922 <+57>:	add    %eax,-0x4(%rbp)
   0x0000000000400925 <+60>:	mov    -0x4(%rbp),%eax
   0x0000000000400928 <+63>:	cmp    -0x20(%rbp),%eax
   0x000000000040092b <+66>:	jl     0x400909 <sumChars+32>
   0x000000000040092d <+68>:	mov    -0x8(%rbp),%eax
   0x0000000000400930 <+71>:	pop    %rbp
   0x0000000000400931 <+72>:	retq   
End of assembler dump.

(gdb) disas swapArr
Dump of assembler code for function swapArr:
   0x0000000000400806 <+0>:	push   %rbp
   0x0000000000400807 <+1>:	mov    %rsp,%rbp
   0x000000000040080a <+4>:	mov    %rdi,-0x8(%rbp)
   0x000000000040080e <+8>:	mov    %esi,-0xc(%rbp)
   0x0000000000400811 <+11>:	mov    %edx,-0x10(%rbp)
   0x0000000000400814 <+14>:	mov    -0xc(%rbp),%eax
   0x0000000000400817 <+17>:	cltq   
   0x0000000000400819 <+19>:	lea    0x0(,%rax,4),%rdx
   0x0000000000400821 <+27>:	mov    -0x8(%rbp),%rax
   0x0000000000400825 <+31>:	add    %rdx,%rax
   0x0000000000400828 <+34>:	mov    -0xc(%rbp),%edx
   0x000000000040082b <+37>:	movslq %edx,%rdx
   0x000000000040082e <+40>:	lea    0x0(,%rdx,4),%rcx
   0x0000000000400836 <+48>:	mov    -0x8(%rbp),%rdx
   0x000000000040083a <+52>:	add    %rcx,%rdx
   0x000000000040083d <+55>:	mov    (%rdx),%ecx
   0x000000000040083f <+57>:	mov    -0x10(%rbp),%edx
   0x0000000000400842 <+60>:	movslq %edx,%rdx
   0x0000000000400845 <+63>:	lea    0x0(,%rdx,4),%rsi
   0x000000000040084d <+71>:	mov    -0x8(%rbp),%rdx
   0x0000000000400851 <+75>:	add    %rsi,%rdx
   0x0000000000400854 <+78>:	mov    (%rdx),%edx
   0x0000000000400856 <+80>:	xor    %ecx,%edx
   0x0000000000400858 <+82>:	mov    %edx,(%rax)
   0x000000000040085a <+84>:	mov    -0x10(%rbp),%eax
   0x000000000040085d <+87>:	cltq   
   0x000000000040085f <+89>:	lea    0x0(,%rax,4),%rdx
   0x0000000000400867 <+97>:	mov    -0x8(%rbp),%rax
   0x000000000040086b <+101>:	add    %rdx,%rax
   0x000000000040086e <+104>:	mov    -0x10(%rbp),%edx
   0x0000000000400871 <+107>:	movslq %edx,%rdx
   0x0000000000400874 <+110>:	lea    0x0(,%rdx,4),%rcx
   0x000000000040087c <+118>:	mov    -0x8(%rbp),%rdx
   0x0000000000400880 <+122>:	add    %rcx,%rdx
   0x0000000000400883 <+125>:	mov    (%rdx),%ecx
   0x0000000000400885 <+127>:	mov    -0xc(%rbp),%edx
   0x0000000000400888 <+130>:	movslq %edx,%rdx
   0x000000000040088b <+133>:	lea    0x0(,%rdx,4),%rsi
   0x0000000000400893 <+141>:	mov    -0x8(%rbp),%rdx
   0x0000000000400897 <+145>:	add    %rsi,%rdx
   0x000000000040089a <+148>:	mov    (%rdx),%edx
   0x000000000040089c <+150>:	xor    %ecx,%edx
   0x000000000040089e <+152>:	mov    %edx,(%rax)
   0x00000000004008a0 <+154>:	mov    -0xc(%rbp),%eax
   0x00000000004008a3 <+157>:	cltq   
   0x00000000004008a5 <+159>:	lea    0x0(,%rax,4),%rdx
   0x00000000004008ad <+167>:	mov    -0x8(%rbp),%rax
   0x00000000004008b1 <+171>:	add    %rdx,%rax
   0x00000000004008b4 <+174>:	mov    -0xc(%rbp),%edx
   0x00000000004008b7 <+177>:	movslq %edx,%rdx
   0x00000000004008ba <+180>:	lea    0x0(,%rdx,4),%rcx
   0x00000000004008c2 <+188>:	mov    -0x8(%rbp),%rdx
   0x00000000004008c6 <+192>:	add    %rcx,%rdx
   0x00000000004008c9 <+195>:	mov    (%rdx),%ecx
   0x00000000004008cb <+197>:	mov    -0x10(%rbp),%edx
   0x00000000004008ce <+200>:	movslq %edx,%rdx
   0x00000000004008d1 <+203>:	lea    0x0(,%rdx,4),%rsi
   0x00000000004008d9 <+211>:	mov    -0x8(%rbp),%rdx
   0x00000000004008dd <+215>:	add    %rsi,%rdx
   0x00000000004008e0 <+218>:	mov    (%rdx),%edx
   0x00000000004008e2 <+220>:	xor    %ecx,%edx
   0x00000000004008e4 <+222>:	mov    %edx,(%rax)
   0x00000000004008e6 <+224>:	nop
   0x00000000004008e7 <+225>:	pop    %rbp
   0x00000000004008e8 <+226>:	retq   
End of assembler dump.
