package javax.mail;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.BitSet;
import java.util.Locale;

public class URLName
{
  static final int caseDiff = 32;
  private static boolean doEncode;
  static BitSet dontNeedEncoding;
  private String file;
  protected String fullURL;
  private int hashCode = 0;
  private String host;
  private InetAddress hostAddress;
  private boolean hostAddressKnown = false;
  private String password;
  private int port = -1;
  private String protocol;
  private String ref;
  private String username;
  
  static
  {
    boolean bool = true;
    doEncode = true;
    try
    {
      if (Boolean.getBoolean("mail.URLName.dontencode")) {
        bool = false;
      }
      doEncode = bool;
    }
    catch (Exception localException)
    {
      int i;
      for (;;) {}
    }
    dontNeedEncoding = new BitSet(256);
    i = 97;
    if (i > 122)
    {
      i = 65;
      label45:
      if (i <= 90) {
        break label115;
      }
      i = 48;
    }
    for (;;)
    {
      if (i > 57)
      {
        dontNeedEncoding.set(32);
        dontNeedEncoding.set(45);
        dontNeedEncoding.set(95);
        dontNeedEncoding.set(46);
        dontNeedEncoding.set(42);
        return;
        dontNeedEncoding.set(i);
        i += 1;
        break;
        label115:
        dontNeedEncoding.set(i);
        i += 1;
        break label45;
      }
      dontNeedEncoding.set(i);
      i += 1;
    }
  }
  
  public URLName(String paramString)
  {
    parseString(paramString);
  }
  
  public URLName(String paramString1, String paramString2, int paramInt, String paramString3, String paramString4, String paramString5)
  {
    this.protocol = paramString1;
    this.host = paramString2;
    this.port = paramInt;
    if (paramString3 != null)
    {
      paramInt = paramString3.indexOf('#');
      if (paramInt != -1) {
        this.file = paramString3.substring(0, paramInt);
      }
    }
    for (this.ref = paramString3.substring(paramInt + 1);; this.ref = null)
    {
      paramString1 = paramString4;
      if (doEncode) {
        paramString1 = encode(paramString4);
      }
      this.username = paramString1;
      paramString1 = paramString5;
      if (doEncode) {
        paramString1 = encode(paramString5);
      }
      this.password = paramString1;
      return;
      this.file = paramString3;
    }
  }
  
  public URLName(URL paramURL)
  {
    this(paramURL.toString());
  }
  
  private static String _encode(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer(paramString.length());
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(10);
    OutputStreamWriter localOutputStreamWriter = new OutputStreamWriter(localByteArrayOutputStream);
    int i = 0;
    int k;
    int j;
    for (;;)
    {
      if (i >= paramString.length()) {
        return localStringBuffer.toString();
      }
      k = paramString.charAt(i);
      if (!dontNeedEncoding.get(k)) {
        break;
      }
      j = k;
      if (k == 32) {
        j = 43;
      }
      localStringBuffer.append((char)j);
      i += 1;
    }
    for (;;)
    {
      try
      {
        localOutputStreamWriter.write(k);
        localOutputStreamWriter.flush();
        byte[] arrayOfByte = localByteArrayOutputStream.toByteArray();
        j = 0;
        if (j < arrayOfByte.length) {
          break label148;
        }
        localByteArrayOutputStream.reset();
      }
      catch (IOException localIOException)
      {
        localByteArrayOutputStream.reset();
      }
      break;
      label148:
      localStringBuffer.append('%');
      char c2 = Character.forDigit(localIOException[j] >> 4 & 0xF, 16);
      char c1 = c2;
      if (Character.isLetter(c2)) {
        c1 = (char)(c2 - ' ');
      }
      localStringBuffer.append(c1);
      c2 = Character.forDigit(localIOException[j] & 0xF, 16);
      c1 = c2;
      if (Character.isLetter(c2)) {
        c1 = (char)(c2 - ' ');
      }
      localStringBuffer.append(c1);
      j += 1;
    }
  }
  
  static String decode(String paramString)
  {
    if (paramString == null) {
      localObject = null;
    }
    do
    {
      return (String)localObject;
      localObject = paramString;
    } while (indexOfAny(paramString, "+%") == -1);
    Object localObject = new StringBuffer();
    int i = 0;
    if (i >= paramString.length()) {
      paramString = ((StringBuffer)localObject).toString();
    }
    try
    {
      localObject = new String(paramString.getBytes("8859_1"));
      paramString = (String)localObject;
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException)
    {
      char c;
      for (;;) {}
    }
    return paramString;
    c = paramString.charAt(i);
    switch (c)
    {
    default: 
      ((StringBuffer)localObject).append(c);
    }
    for (;;)
    {
      i += 1;
      break;
      ((StringBuffer)localObject).append(' ');
      continue;
      try
      {
        ((StringBuffer)localObject).append((char)Integer.parseInt(paramString.substring(i + 1, i + 3), 16));
        i += 2;
      }
      catch (NumberFormatException paramString)
      {
        throw new IllegalArgumentException();
      }
    }
  }
  
  static String encode(String paramString)
  {
    String str;
    if (paramString == null)
    {
      str = null;
      return str;
    }
    int i = 0;
    for (;;)
    {
      str = paramString;
      if (i >= paramString.length()) {
        break;
      }
      int j = paramString.charAt(i);
      if ((j == 32) || (!dontNeedEncoding.get(j))) {
        return _encode(paramString);
      }
      i += 1;
    }
  }
  
  /* Error */
  private InetAddress getHostAddress()
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_1
    //   2: aload_0
    //   3: monitorenter
    //   4: aload_0
    //   5: getfield 55	javax/mail/URLName:hostAddressKnown	Z
    //   8: ifeq +12 -> 20
    //   11: aload_0
    //   12: getfield 193	javax/mail/URLName:hostAddress	Ljava/net/InetAddress;
    //   15: astore_1
    //   16: aload_0
    //   17: monitorexit
    //   18: aload_1
    //   19: areturn
    //   20: aload_0
    //   21: getfield 67	javax/mail/URLName:host	Ljava/lang/String;
    //   24: astore_2
    //   25: aload_2
    //   26: ifnull -10 -> 16
    //   29: aload_0
    //   30: aload_0
    //   31: getfield 67	javax/mail/URLName:host	Ljava/lang/String;
    //   34: invokestatic 199	java/net/InetAddress:getByName	(Ljava/lang/String;)Ljava/net/InetAddress;
    //   37: putfield 193	javax/mail/URLName:hostAddress	Ljava/net/InetAddress;
    //   40: aload_0
    //   41: iconst_1
    //   42: putfield 55	javax/mail/URLName:hostAddressKnown	Z
    //   45: aload_0
    //   46: getfield 193	javax/mail/URLName:hostAddress	Ljava/net/InetAddress;
    //   49: astore_1
    //   50: goto -34 -> 16
    //   53: astore_1
    //   54: aload_0
    //   55: aconst_null
    //   56: putfield 193	javax/mail/URLName:hostAddress	Ljava/net/InetAddress;
    //   59: goto -19 -> 40
    //   62: astore_1
    //   63: aload_0
    //   64: monitorexit
    //   65: aload_1
    //   66: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	67	0	this	URLName
    //   1	49	1	localInetAddress	InetAddress
    //   53	1	1	localUnknownHostException	java.net.UnknownHostException
    //   62	4	1	localObject	Object
    //   24	2	2	str	String
    // Exception table:
    //   from	to	target	type
    //   29	40	53	java/net/UnknownHostException
    //   4	16	62	finally
    //   20	25	62	finally
    //   29	40	62	finally
    //   40	50	62	finally
    //   54	59	62	finally
  }
  
  private static int indexOfAny(String paramString1, String paramString2)
  {
    return indexOfAny(paramString1, paramString2, 0);
  }
  
  private static int indexOfAny(String paramString1, String paramString2, int paramInt)
  {
    int j;
    do
    {
      try
      {
        j = paramString1.length();
      }
      catch (StringIndexOutOfBoundsException paramString1)
      {
        int k;
        return -1;
      }
      k = paramString2.indexOf(paramString1.charAt(paramInt));
      i = paramInt;
      if (k >= 0) {
        break;
      }
      paramInt += 1;
    } while (paramInt < j);
    int i = -1;
    return i;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof URLName)) {
      break label61;
    }
    label61:
    label103:
    label177:
    label185:
    label191:
    for (;;)
    {
      return false;
      URLName localURLName = (URLName)paramObject;
      if ((localURLName.protocol != null) && (localURLName.protocol.equals(this.protocol)))
      {
        paramObject = getHostAddress();
        Object localObject = localURLName.getHostAddress();
        if ((paramObject != null) && (localObject != null))
        {
          if (!((InetAddress)paramObject).equals(localObject)) {
            continue;
          }
          if ((this.username != localURLName.username) && ((this.username == null) || (!this.username.equals(localURLName.username)))) {
            continue;
          }
          if (this.file != null) {
            break label177;
          }
          paramObject = "";
          if (localURLName.file != null) {
            break label185;
          }
        }
        for (localObject = "";; localObject = localURLName.file)
        {
          if ((!((String)paramObject).equals(localObject)) || (this.port != localURLName.port)) {
            break label191;
          }
          return true;
          if ((this.host != null) && (localURLName.host != null))
          {
            if (this.host.equalsIgnoreCase(localURLName.host)) {
              break;
            }
            return false;
          }
          if (this.host == localURLName.host) {
            break;
          }
          return false;
          paramObject = this.file;
          break label103;
        }
      }
    }
  }
  
  public String getFile()
  {
    return this.file;
  }
  
  public String getHost()
  {
    return this.host;
  }
  
  public String getPassword()
  {
    if (doEncode) {
      return decode(this.password);
    }
    return this.password;
  }
  
  public int getPort()
  {
    return this.port;
  }
  
  public String getProtocol()
  {
    return this.protocol;
  }
  
  public String getRef()
  {
    return this.ref;
  }
  
  public URL getURL()
    throws MalformedURLException
  {
    return new URL(getProtocol(), getHost(), getPort(), getFile());
  }
  
  public String getUsername()
  {
    if (doEncode) {
      return decode(this.username);
    }
    return this.username;
  }
  
  public int hashCode()
  {
    if (this.hashCode != 0) {
      return this.hashCode;
    }
    if (this.protocol != null) {
      this.hashCode += this.protocol.hashCode();
    }
    InetAddress localInetAddress = getHostAddress();
    if (localInetAddress != null) {
      this.hashCode += localInetAddress.hashCode();
    }
    for (;;)
    {
      if (this.username != null) {
        this.hashCode += this.username.hashCode();
      }
      if (this.file != null) {
        this.hashCode += this.file.hashCode();
      }
      this.hashCode += this.port;
      return this.hashCode;
      if (this.host != null) {
        this.hashCode += this.host.toLowerCase(Locale.ENGLISH).hashCode();
      }
    }
  }
  
  protected void parseString(String paramString)
  {
    this.password = null;
    this.username = null;
    this.host = null;
    this.ref = null;
    this.file = null;
    this.protocol = null;
    this.port = -1;
    int i = paramString.length();
    int j = paramString.indexOf(':');
    if (j != -1) {
      this.protocol = paramString.substring(0, j);
    }
    String str1;
    String str2;
    if (paramString.regionMatches(j + 1, "//", 0, 2))
    {
      int k = paramString.indexOf('/', j + 3);
      if (k != -1)
      {
        str1 = paramString.substring(j + 3, k);
        if (k + 1 < i)
        {
          this.file = paramString.substring(k + 1);
          paramString = str1;
          i = paramString.indexOf('@');
          str1 = paramString;
          if (i != -1)
          {
            str2 = paramString.substring(0, i);
            str1 = paramString.substring(i + 1);
            i = str2.indexOf(':');
            if (i == -1) {
              break label343;
            }
            this.username = str2.substring(0, i);
            this.password = str2.substring(i + 1);
          }
          label196:
          if ((str1.length() <= 0) || (str1.charAt(0) != '[')) {
            break label352;
          }
          i = str1.indexOf(':', str1.indexOf(93));
          if (i == -1) {
            break label372;
          }
          paramString = str1.substring(i + 1);
          if (paramString.length() <= 0) {}
        }
      }
    }
    for (;;)
    {
      try
      {
        this.port = Integer.parseInt(paramString);
        this.host = str1.substring(0, i);
        if (this.file != null)
        {
          i = this.file.indexOf('#');
          if (i != -1)
          {
            this.ref = this.file.substring(i + 1);
            this.file = this.file.substring(0, i);
          }
        }
        return;
        this.file = "";
        paramString = str1;
        break;
        paramString = paramString.substring(j + 3);
        break;
        label343:
        this.username = str2;
        break label196;
        label352:
        i = str1.indexOf(':');
      }
      catch (NumberFormatException paramString)
      {
        this.port = -1;
        continue;
      }
      label372:
      this.host = str1;
      continue;
      if (j + 1 < i) {
        this.file = paramString.substring(j + 1);
      }
    }
  }
  
  public String toString()
  {
    if (this.fullURL == null)
    {
      StringBuffer localStringBuffer = new StringBuffer();
      if (this.protocol != null)
      {
        localStringBuffer.append(this.protocol);
        localStringBuffer.append(":");
      }
      if ((this.username != null) || (this.host != null))
      {
        localStringBuffer.append("//");
        if (this.username != null)
        {
          localStringBuffer.append(this.username);
          if (this.password != null)
          {
            localStringBuffer.append(":");
            localStringBuffer.append(this.password);
          }
          localStringBuffer.append("@");
        }
        if (this.host != null) {
          localStringBuffer.append(this.host);
        }
        if (this.port != -1)
        {
          localStringBuffer.append(":");
          localStringBuffer.append(Integer.toString(this.port));
        }
        if (this.file != null) {
          localStringBuffer.append("/");
        }
      }
      if (this.file != null) {
        localStringBuffer.append(this.file);
      }
      if (this.ref != null)
      {
        localStringBuffer.append("#");
        localStringBuffer.append(this.ref);
      }
      this.fullURL = localStringBuffer.toString();
    }
    return this.fullURL;
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/javax/mail/URLName.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */