package javax.mail;

import com.sun.mail.util.LineInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.URL;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

public final class Session
{
  private static Session defaultSession = null;
  private final Properties addressMap = new Properties();
  private final Hashtable authTable = new Hashtable();
  private final Authenticator authenticator;
  private boolean debug = false;
  private PrintStream out;
  private final Properties props;
  private final Vector providers = new Vector();
  private final Hashtable providersByClassName = new Hashtable();
  private final Hashtable providersByProtocol = new Hashtable();
  
  private Session(Properties paramProperties, Authenticator paramAuthenticator)
  {
    this.props = paramProperties;
    this.authenticator = paramAuthenticator;
    if (Boolean.valueOf(paramProperties.getProperty("mail.debug")).booleanValue()) {
      this.debug = true;
    }
    if (this.debug) {
      pr("DEBUG: JavaMail version 1.4.1");
    }
    if (paramAuthenticator != null) {}
    for (paramProperties = paramAuthenticator.getClass();; paramProperties = getClass())
    {
      loadProviders(paramProperties);
      loadAddressMap(paramProperties);
      return;
    }
  }
  
  private static ClassLoader getContextClassLoader()
  {
    (ClassLoader)AccessController.doPrivileged(new PrivilegedAction()
    {
      public Object run()
      {
        try
        {
          ClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();
          return localClassLoader;
        }
        catch (SecurityException localSecurityException) {}
        return null;
      }
    });
  }
  
  public static Session getDefaultInstance(Properties paramProperties)
  {
    return getDefaultInstance(paramProperties, null);
  }
  
  public static Session getDefaultInstance(Properties paramProperties, Authenticator paramAuthenticator)
  {
    try
    {
      if (defaultSession == null) {
        defaultSession = new Session(paramProperties, paramAuthenticator);
      }
      while ((defaultSession.authenticator == paramAuthenticator) || ((defaultSession.authenticator != null) && (paramAuthenticator != null) && (defaultSession.authenticator.getClass().getClassLoader() == paramAuthenticator.getClass().getClassLoader())))
      {
        paramProperties = defaultSession;
        return paramProperties;
      }
      throw new SecurityException("Access to default session denied");
    }
    finally {}
  }
  
  public static Session getInstance(Properties paramProperties)
  {
    return new Session(paramProperties, null);
  }
  
  public static Session getInstance(Properties paramProperties, Authenticator paramAuthenticator)
  {
    return new Session(paramProperties, paramAuthenticator);
  }
  
  private static InputStream getResourceAsStream(Class paramClass, final String paramString)
    throws IOException
  {
    try
    {
      paramClass = (InputStream)AccessController.doPrivileged(new PrivilegedExceptionAction()
      {
        public Object run()
          throws IOException
        {
          return Session.this.getResourceAsStream(paramString);
        }
      });
      return paramClass;
    }
    catch (PrivilegedActionException paramClass)
    {
      throw ((IOException)paramClass.getException());
    }
  }
  
  private static URL[] getResources(ClassLoader paramClassLoader, final String paramString)
  {
    (URL[])AccessController.doPrivileged(new PrivilegedAction()
    {
      public Object run()
      {
        URL[] arrayOfURL2 = (URL[])null;
        URL[] arrayOfURL3 = arrayOfURL2;
        URL[] arrayOfURL1 = arrayOfURL2;
        try
        {
          Vector localVector = new Vector();
          arrayOfURL3 = arrayOfURL2;
          arrayOfURL1 = arrayOfURL2;
          Object localObject = Session.this.getResources(paramString);
          for (;;)
          {
            if (localObject != null)
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              if (((Enumeration)localObject).hasMoreElements()) {}
            }
            else
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localObject = arrayOfURL2;
              if (localVector.size() <= 0) {
                break;
              }
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              arrayOfURL2 = new URL[localVector.size()];
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localVector.copyInto(arrayOfURL2);
              return arrayOfURL2;
            }
            arrayOfURL3 = arrayOfURL2;
            arrayOfURL1 = arrayOfURL2;
            URL localURL = (URL)((Enumeration)localObject).nextElement();
            if (localURL != null)
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localVector.addElement(localURL);
            }
          }
          return localObject;
        }
        catch (IOException localIOException)
        {
          return arrayOfURL3;
        }
        catch (SecurityException localSecurityException)
        {
          localObject = localIOException;
        }
      }
    });
  }
  
  /* Error */
  private Object getService(Provider paramProvider, URLName paramURLName)
    throws NoSuchProviderException
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnonnull +13 -> 14
    //   4: new 170	javax/mail/NoSuchProviderException
    //   7: dup
    //   8: ldc -80
    //   10: invokespecial 177	javax/mail/NoSuchProviderException:<init>	(Ljava/lang/String;)V
    //   13: athrow
    //   14: aload_2
    //   15: astore 4
    //   17: aload_2
    //   18: ifnonnull +21 -> 39
    //   21: new 179	javax/mail/URLName
    //   24: dup
    //   25: aload_1
    //   26: invokevirtual 185	javax/mail/Provider:getProtocol	()Ljava/lang/String;
    //   29: aconst_null
    //   30: iconst_m1
    //   31: aconst_null
    //   32: aconst_null
    //   33: aconst_null
    //   34: invokespecial 188	javax/mail/URLName:<init>	(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   37: astore 4
    //   39: aload_0
    //   40: getfield 69	javax/mail/Session:authenticator	Ljavax/mail/Authenticator;
    //   43: ifnull +92 -> 135
    //   46: aload_0
    //   47: getfield 69	javax/mail/Session:authenticator	Ljavax/mail/Authenticator;
    //   50: invokevirtual 95	java/lang/Object:getClass	()Ljava/lang/Class;
    //   53: invokevirtual 136	java/lang/Class:getClassLoader	()Ljava/lang/ClassLoader;
    //   56: astore 5
    //   58: aconst_null
    //   59: astore_3
    //   60: invokestatic 190	javax/mail/Session:getContextClassLoader	()Ljava/lang/ClassLoader;
    //   63: astore 6
    //   65: aload_3
    //   66: astore_2
    //   67: aload 6
    //   69: ifnull +13 -> 82
    //   72: aload 6
    //   74: aload_1
    //   75: invokevirtual 193	javax/mail/Provider:getClassName	()Ljava/lang/String;
    //   78: invokevirtual 197	java/lang/ClassLoader:loadClass	(Ljava/lang/String;)Ljava/lang/Class;
    //   81: astore_2
    //   82: aload_2
    //   83: astore_3
    //   84: aload_2
    //   85: ifnonnull +13 -> 98
    //   88: aload 5
    //   90: aload_1
    //   91: invokevirtual 193	javax/mail/Provider:getClassName	()Ljava/lang/String;
    //   94: invokevirtual 197	java/lang/ClassLoader:loadClass	(Ljava/lang/String;)Ljava/lang/Class;
    //   97: astore_3
    //   98: aload_3
    //   99: iconst_2
    //   100: anewarray 133	java/lang/Class
    //   103: dup
    //   104: iconst_0
    //   105: ldc 2
    //   107: aastore
    //   108: dup
    //   109: iconst_1
    //   110: ldc -77
    //   112: aastore
    //   113: invokevirtual 201	java/lang/Class:getConstructor	([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
    //   116: iconst_2
    //   117: anewarray 4	java/lang/Object
    //   120: dup
    //   121: iconst_0
    //   122: aload_0
    //   123: aastore
    //   124: dup
    //   125: iconst_1
    //   126: aload 4
    //   128: aastore
    //   129: invokevirtual 207	java/lang/reflect/Constructor:newInstance	([Ljava/lang/Object;)Ljava/lang/Object;
    //   132: astore_2
    //   133: aload_2
    //   134: areturn
    //   135: aload_0
    //   136: invokevirtual 95	java/lang/Object:getClass	()Ljava/lang/Class;
    //   139: invokevirtual 136	java/lang/Class:getClassLoader	()Ljava/lang/ClassLoader;
    //   142: astore 5
    //   144: goto -86 -> 58
    //   147: astore_2
    //   148: aload_1
    //   149: invokevirtual 193	javax/mail/Provider:getClassName	()Ljava/lang/String;
    //   152: invokestatic 210	java/lang/Class:forName	(Ljava/lang/String;)Ljava/lang/Class;
    //   155: astore_3
    //   156: goto -58 -> 98
    //   159: astore_2
    //   160: aload_0
    //   161: getfield 51	javax/mail/Session:debug	Z
    //   164: ifeq +11 -> 175
    //   167: aload_2
    //   168: aload_0
    //   169: invokevirtual 214	javax/mail/Session:getDebugOut	()Ljava/io/PrintStream;
    //   172: invokevirtual 218	java/lang/Exception:printStackTrace	(Ljava/io/PrintStream;)V
    //   175: new 170	javax/mail/NoSuchProviderException
    //   178: dup
    //   179: aload_1
    //   180: invokevirtual 185	javax/mail/Provider:getProtocol	()Ljava/lang/String;
    //   183: invokespecial 177	javax/mail/NoSuchProviderException:<init>	(Ljava/lang/String;)V
    //   186: athrow
    //   187: astore_2
    //   188: aload_0
    //   189: getfield 51	javax/mail/Session:debug	Z
    //   192: ifeq +11 -> 203
    //   195: aload_2
    //   196: aload_0
    //   197: invokevirtual 214	javax/mail/Session:getDebugOut	()Ljava/io/PrintStream;
    //   200: invokevirtual 218	java/lang/Exception:printStackTrace	(Ljava/io/PrintStream;)V
    //   203: new 170	javax/mail/NoSuchProviderException
    //   206: dup
    //   207: aload_1
    //   208: invokevirtual 185	javax/mail/Provider:getProtocol	()Ljava/lang/String;
    //   211: invokespecial 177	javax/mail/NoSuchProviderException:<init>	(Ljava/lang/String;)V
    //   214: athrow
    //   215: astore_2
    //   216: aload_3
    //   217: astore_2
    //   218: goto -136 -> 82
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	221	0	this	Session
    //   0	221	1	paramProvider	Provider
    //   0	221	2	paramURLName	URLName
    //   59	158	3	localObject	Object
    //   15	112	4	localURLName	URLName
    //   56	87	5	localClassLoader1	ClassLoader
    //   63	10	6	localClassLoader2	ClassLoader
    // Exception table:
    //   from	to	target	type
    //   60	65	147	java/lang/Exception
    //   72	82	147	java/lang/Exception
    //   88	98	147	java/lang/Exception
    //   148	156	159	java/lang/Exception
    //   98	133	187	java/lang/Exception
    //   72	82	215	java/lang/ClassNotFoundException
  }
  
  private Store getStore(Provider paramProvider, URLName paramURLName)
    throws NoSuchProviderException
  {
    if ((paramProvider == null) || (paramProvider.getType() != Provider.Type.STORE)) {
      throw new NoSuchProviderException("invalid provider");
    }
    try
    {
      paramProvider = (Store)getService(paramProvider, paramURLName);
      return paramProvider;
    }
    catch (ClassCastException paramProvider)
    {
      throw new NoSuchProviderException("incorrect class");
    }
  }
  
  private static URL[] getSystemResources(String paramString)
  {
    (URL[])AccessController.doPrivileged(new PrivilegedAction()
    {
      public Object run()
      {
        URL[] arrayOfURL2 = (URL[])null;
        URL[] arrayOfURL3 = arrayOfURL2;
        URL[] arrayOfURL1 = arrayOfURL2;
        try
        {
          Vector localVector = new Vector();
          arrayOfURL3 = arrayOfURL2;
          arrayOfURL1 = arrayOfURL2;
          Object localObject = ClassLoader.getSystemResources(Session.this);
          for (;;)
          {
            if (localObject != null)
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              if (((Enumeration)localObject).hasMoreElements()) {}
            }
            else
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localObject = arrayOfURL2;
              if (localVector.size() <= 0) {
                break;
              }
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              arrayOfURL2 = new URL[localVector.size()];
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localVector.copyInto(arrayOfURL2);
              return arrayOfURL2;
            }
            arrayOfURL3 = arrayOfURL2;
            arrayOfURL1 = arrayOfURL2;
            URL localURL = (URL)((Enumeration)localObject).nextElement();
            if (localURL != null)
            {
              arrayOfURL3 = arrayOfURL2;
              arrayOfURL1 = arrayOfURL2;
              localVector.addElement(localURL);
            }
          }
          return localObject;
        }
        catch (IOException localIOException)
        {
          return arrayOfURL3;
        }
        catch (SecurityException localSecurityException)
        {
          localObject = localIOException;
        }
      }
    });
  }
  
  private Transport getTransport(Provider paramProvider, URLName paramURLName)
    throws NoSuchProviderException
  {
    if ((paramProvider == null) || (paramProvider.getType() != Provider.Type.TRANSPORT)) {
      throw new NoSuchProviderException("invalid provider");
    }
    try
    {
      paramProvider = (Transport)getService(paramProvider, paramURLName);
      return paramProvider;
    }
    catch (ClassCastException paramProvider)
    {
      throw new NoSuchProviderException("incorrect class");
    }
  }
  
  private void loadAddressMap(Class paramClass)
  {
    StreamLoader local2 = new StreamLoader()
    {
      public void load(InputStream paramAnonymousInputStream)
        throws IOException
      {
        Session.this.addressMap.load(paramAnonymousInputStream);
      }
    };
    loadResource("/META-INF/javamail.default.address.map", paramClass, local2);
    loadAllResources("META-INF/javamail.address.map", paramClass, local2);
    try
    {
      loadFile(System.getProperty("java.home") + File.separator + "lib" + File.separator + "javamail.address.map", local2);
      if (this.addressMap.isEmpty())
      {
        if (this.debug) {
          pr("DEBUG: failed to load address map, using defaults");
        }
        this.addressMap.put("rfc822", "smtp");
      }
      return;
    }
    catch (SecurityException paramClass)
    {
      for (;;)
      {
        if (this.debug) {
          pr("DEBUG: can't get java.home: " + paramClass);
        }
      }
    }
  }
  
  private void loadAllResources(String paramString, Class paramClass, StreamLoader paramStreamLoader)
  {
    i = 0;
    m = 0;
    k = 0;
    j = m;
    try
    {
      localObject3 = getContextClassLoader();
      localObject1 = localObject3;
      if (localObject3 == null)
      {
        j = m;
        localObject1 = paramClass.getClassLoader();
      }
      if (localObject1 == null) {
        break label116;
      }
      j = m;
      arrayOfURL = getResources((ClassLoader)localObject1, paramString);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        URL[] arrayOfURL;
        int i2;
        int i1;
        try
        {
          Object localObject3;
          Object localObject1;
          URL localURL;
          Object localObject5;
          int n;
          localIOException2.close();
          j = n;
          throw ((Throwable)localObject4);
          localException = localException;
          i = j;
          if (!this.debug) {
            continue;
          }
          pr("DEBUG: " + localException);
          i = j;
        }
        catch (IOException localIOException3)
        {
          continue;
        }
        if (arrayOfURL != null)
        {
          i2 = 0;
          i = k;
        }
      }
    }
    j = i;
    k = arrayOfURL.length;
    if (i2 >= k)
    {
      if (i == 0)
      {
        if (this.debug) {
          pr("DEBUG: !anyLoaded");
        }
        loadResource("/" + paramString, paramClass, paramStreamLoader);
      }
      return;
      label116:
      j = m;
      arrayOfURL = getSystemResources(paramString);
    }
    else
    {
      localURL = arrayOfURL[i2];
      localObject5 = null;
      localObject1 = null;
      localObject3 = null;
      j = i;
      if (this.debug)
      {
        j = i;
        pr("DEBUG: URL " + localURL);
      }
      k = i;
      m = i;
      n = i;
      for (;;)
      {
        try
        {
          localInputStream = openStream(localURL);
          if (localInputStream != null)
          {
            k = i;
            localObject3 = localInputStream;
            m = i;
            localObject5 = localInputStream;
            n = i;
            localObject1 = localInputStream;
            paramStreamLoader.load(localInputStream);
            j = 1;
            int i3 = 1;
            int i4 = 1;
            i = 1;
            i1 = i;
            k = j;
            localObject3 = localInputStream;
            m = i3;
            localObject5 = localInputStream;
            n = i4;
            localObject1 = localInputStream;
            if (this.debug)
            {
              k = j;
              localObject3 = localInputStream;
              m = i3;
              localObject5 = localInputStream;
              n = i4;
              localObject1 = localInputStream;
              pr("DEBUG: successfully loaded resource: " + localURL);
              i1 = i;
            }
            i = i1;
          }
        }
        catch (IOException localIOException5)
        {
          InputStream localInputStream;
          n = k;
          localObject1 = localObject3;
          if (this.debug)
          {
            n = k;
            localObject1 = localObject3;
            pr("DEBUG: " + localIOException5);
          }
          i = k;
          if (localObject3 == null) {
            continue;
          }
          j = k;
          try
          {
            ((InputStream)localObject3).close();
            i = k;
          }
          catch (IOException localIOException1)
          {
            i = k;
          }
          continue;
        }
        catch (SecurityException localSecurityException)
        {
          n = m;
          Object localObject2 = localIOException5;
          if (this.debug)
          {
            n = m;
            localObject2 = localIOException5;
            pr("DEBUG: " + localSecurityException);
          }
          i = m;
          if (localIOException5 == null) {
            continue;
          }
          j = m;
          try
          {
            localIOException5.close();
            i = m;
          }
          catch (IOException localIOException2)
          {
            i = m;
          }
          continue;
        }
        finally
        {
          if (localIOException2 != null) {
            j = n;
          }
        }
        try
        {
          localInputStream.close();
          i = i1;
        }
        catch (IOException localIOException4)
        {
          i = i1;
          continue;
        }
        i2 += 1;
        break;
        i1 = i;
        k = i;
        localObject3 = localInputStream;
        m = i;
        localObject5 = localInputStream;
        n = i;
        localObject1 = localInputStream;
        if (this.debug)
        {
          k = i;
          localObject3 = localInputStream;
          m = i;
          localObject5 = localInputStream;
          n = i;
          localObject1 = localInputStream;
          pr("DEBUG: not loading resource: " + localURL);
          i1 = i;
        }
      }
    }
  }
  
  /* Error */
  private void loadFile(String paramString, StreamLoader paramStreamLoader)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 6
    //   3: aconst_null
    //   4: astore_3
    //   5: aconst_null
    //   6: astore 5
    //   8: new 346	java/io/BufferedInputStream
    //   11: dup
    //   12: new 348	java/io/FileInputStream
    //   15: dup
    //   16: aload_1
    //   17: invokespecial 349	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   20: invokespecial 351	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   23: astore 4
    //   25: aload_2
    //   26: aload 4
    //   28: invokeinterface 335 2 0
    //   33: aload_0
    //   34: getfield 51	javax/mail/Session:debug	Z
    //   37: ifeq +24 -> 61
    //   40: aload_0
    //   41: new 266	java/lang/StringBuilder
    //   44: dup
    //   45: ldc_w 353
    //   48: invokespecial 277	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   51: aload_1
    //   52: invokevirtual 287	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   55: invokevirtual 294	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   58: invokespecial 91	javax/mail/Session:pr	(Ljava/lang/String;)V
    //   61: aload 4
    //   63: ifnull +197 -> 260
    //   66: aload 4
    //   68: invokevirtual 340	java/io/InputStream:close	()V
    //   71: return
    //   72: astore 4
    //   74: aload 5
    //   76: astore_2
    //   77: aload_2
    //   78: astore_3
    //   79: aload_0
    //   80: getfield 51	javax/mail/Session:debug	Z
    //   83: ifeq +50 -> 133
    //   86: aload_2
    //   87: astore_3
    //   88: aload_0
    //   89: new 266	java/lang/StringBuilder
    //   92: dup
    //   93: ldc_w 355
    //   96: invokespecial 277	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   99: aload_1
    //   100: invokevirtual 287	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   103: invokevirtual 294	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   106: invokespecial 91	javax/mail/Session:pr	(Ljava/lang/String;)V
    //   109: aload_2
    //   110: astore_3
    //   111: aload_0
    //   112: new 266	java/lang/StringBuilder
    //   115: dup
    //   116: ldc_w 344
    //   119: invokespecial 277	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   122: aload 4
    //   124: invokevirtual 316	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   127: invokevirtual 294	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   130: invokespecial 91	javax/mail/Session:pr	(Ljava/lang/String;)V
    //   133: aload_2
    //   134: ifnull -63 -> 71
    //   137: aload_2
    //   138: invokevirtual 340	java/io/InputStream:close	()V
    //   141: return
    //   142: astore_1
    //   143: return
    //   144: astore 4
    //   146: aload 6
    //   148: astore_2
    //   149: aload_2
    //   150: astore_3
    //   151: aload_0
    //   152: getfield 51	javax/mail/Session:debug	Z
    //   155: ifeq +50 -> 205
    //   158: aload_2
    //   159: astore_3
    //   160: aload_0
    //   161: new 266	java/lang/StringBuilder
    //   164: dup
    //   165: ldc_w 355
    //   168: invokespecial 277	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   171: aload_1
    //   172: invokevirtual 287	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: invokevirtual 294	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   178: invokespecial 91	javax/mail/Session:pr	(Ljava/lang/String;)V
    //   181: aload_2
    //   182: astore_3
    //   183: aload_0
    //   184: new 266	java/lang/StringBuilder
    //   187: dup
    //   188: ldc_w 344
    //   191: invokespecial 277	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   194: aload 4
    //   196: invokevirtual 316	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   199: invokevirtual 294	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   202: invokespecial 91	javax/mail/Session:pr	(Ljava/lang/String;)V
    //   205: aload_2
    //   206: ifnull -135 -> 71
    //   209: aload_2
    //   210: invokevirtual 340	java/io/InputStream:close	()V
    //   213: return
    //   214: astore_1
    //   215: return
    //   216: astore_1
    //   217: aload_3
    //   218: ifnull +7 -> 225
    //   221: aload_3
    //   222: invokevirtual 340	java/io/InputStream:close	()V
    //   225: aload_1
    //   226: athrow
    //   227: astore_1
    //   228: return
    //   229: astore_2
    //   230: goto -5 -> 225
    //   233: astore_1
    //   234: aload 4
    //   236: astore_3
    //   237: goto -20 -> 217
    //   240: astore_3
    //   241: aload 4
    //   243: astore_2
    //   244: aload_3
    //   245: astore 4
    //   247: goto -98 -> 149
    //   250: astore_3
    //   251: aload 4
    //   253: astore_2
    //   254: aload_3
    //   255: astore 4
    //   257: goto -180 -> 77
    //   260: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	261	0	this	Session
    //   0	261	1	paramString	String
    //   0	261	2	paramStreamLoader	StreamLoader
    //   4	233	3	localObject1	Object
    //   240	5	3	localSecurityException1	SecurityException
    //   250	5	3	localIOException1	IOException
    //   23	44	4	localBufferedInputStream	java.io.BufferedInputStream
    //   72	51	4	localIOException2	IOException
    //   144	98	4	localSecurityException2	SecurityException
    //   245	11	4	localObject2	Object
    //   6	69	5	localObject3	Object
    //   1	146	6	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   8	25	72	java/io/IOException
    //   137	141	142	java/io/IOException
    //   8	25	144	java/lang/SecurityException
    //   209	213	214	java/io/IOException
    //   8	25	216	finally
    //   79	86	216	finally
    //   88	109	216	finally
    //   111	133	216	finally
    //   151	158	216	finally
    //   160	181	216	finally
    //   183	205	216	finally
    //   66	71	227	java/io/IOException
    //   221	225	229	java/io/IOException
    //   25	61	233	finally
    //   25	61	240	java/lang/SecurityException
    //   25	61	250	java/io/IOException
  }
  
  private void loadProviders(Class paramClass)
  {
    StreamLoader local1 = new StreamLoader()
    {
      public void load(InputStream paramAnonymousInputStream)
        throws IOException
      {
        Session.this.loadProvidersFromStream(paramAnonymousInputStream);
      }
    };
    try
    {
      loadFile(System.getProperty("java.home") + File.separator + "lib" + File.separator + "javamail.providers", local1);
      loadAllResources("META-INF/javamail.providers", paramClass, local1);
      loadResource("/META-INF/javamail.default.providers", paramClass, local1);
      if (this.providers.size() == 0)
      {
        if (this.debug) {
          pr("DEBUG: failed to load any providers, using defaults");
        }
        addProvider(new Provider(Provider.Type.STORE, "imap", "com.sun.mail.imap.IMAPStore", "Sun Microsystems, Inc.", "1.4.1"));
        addProvider(new Provider(Provider.Type.STORE, "imaps", "com.sun.mail.imap.IMAPSSLStore", "Sun Microsystems, Inc.", "1.4.1"));
        addProvider(new Provider(Provider.Type.STORE, "pop3", "com.sun.mail.pop3.POP3Store", "Sun Microsystems, Inc.", "1.4.1"));
        addProvider(new Provider(Provider.Type.STORE, "pop3s", "com.sun.mail.pop3.POP3SSLStore", "Sun Microsystems, Inc.", "1.4.1"));
        addProvider(new Provider(Provider.Type.TRANSPORT, "smtp", "com.sun.mail.smtp.SMTPTransport", "Sun Microsystems, Inc.", "1.4.1"));
        addProvider(new Provider(Provider.Type.TRANSPORT, "smtps", "com.sun.mail.smtp.SMTPSSLTransport", "Sun Microsystems, Inc.", "1.4.1"));
      }
      if (this.debug)
      {
        pr("DEBUG: Tables of loaded providers");
        pr("DEBUG: Providers Listed By Class Name: " + this.providersByClassName.toString());
        pr("DEBUG: Providers Listed By Protocol: " + this.providersByProtocol.toString());
      }
      return;
    }
    catch (SecurityException localSecurityException)
    {
      for (;;)
      {
        if (this.debug) {
          pr("DEBUG: can't get java.home: " + localSecurityException);
        }
      }
    }
  }
  
  private void loadProvidersFromStream(InputStream paramInputStream)
    throws IOException
  {
    LineInputStream localLineInputStream;
    if (paramInputStream != null) {
      localLineInputStream = new LineInputStream(paramInputStream);
    }
    for (;;)
    {
      String str5 = localLineInputStream.readLine();
      if (str5 == null) {
        return;
      }
      if (!str5.startsWith("#"))
      {
        paramInputStream = null;
        String str4 = null;
        String str3 = null;
        String str2 = null;
        String str1 = null;
        StringTokenizer localStringTokenizer = new StringTokenizer(str5, ";");
        for (;;)
        {
          if (!localStringTokenizer.hasMoreTokens())
          {
            if ((paramInputStream != null) && (str4 != null) && (str3 != null) && (str4.length() > 0) && (str3.length() > 0)) {
              break label306;
            }
            if (!this.debug) {
              break;
            }
            pr("DEBUG: Bad provider entry: " + str5);
            break;
          }
          String str6 = localStringTokenizer.nextToken().trim();
          int i = str6.indexOf("=");
          if (str6.startsWith("protocol="))
          {
            str4 = str6.substring(i + 1);
          }
          else if (str6.startsWith("type="))
          {
            str6 = str6.substring(i + 1);
            if (str6.equalsIgnoreCase("store")) {
              paramInputStream = Provider.Type.STORE;
            } else if (str6.equalsIgnoreCase("transport")) {
              paramInputStream = Provider.Type.TRANSPORT;
            }
          }
          else if (str6.startsWith("class="))
          {
            str3 = str6.substring(i + 1);
          }
          else if (str6.startsWith("vendor="))
          {
            str2 = str6.substring(i + 1);
          }
          else if (str6.startsWith("version="))
          {
            str1 = str6.substring(i + 1);
          }
        }
        label306:
        addProvider(new Provider(paramInputStream, str4, str3, str2, str1));
      }
    }
  }
  
  private void loadResource(String paramString, Class paramClass, StreamLoader paramStreamLoader)
  {
    Class localClass2 = null;
    Object localObject = null;
    Class localClass1 = null;
    for (;;)
    {
      try
      {
        paramClass = getResourceAsStream(paramClass, paramString);
        if (paramClass != null)
        {
          localClass1 = paramClass;
          localClass2 = paramClass;
          localObject = paramClass;
          paramStreamLoader.load(paramClass);
          localClass1 = paramClass;
          localClass2 = paramClass;
          localObject = paramClass;
          if (this.debug)
          {
            localClass1 = paramClass;
            localClass2 = paramClass;
            localObject = paramClass;
            pr("DEBUG: successfully loaded resource: " + paramString);
          }
          if (paramClass == null) {}
        }
      }
      catch (IOException paramString)
      {
        localObject = localClass1;
        if (this.debug)
        {
          localObject = localClass1;
          pr("DEBUG: " + paramString);
        }
        if (localClass1 == null) {
          continue;
        }
        try
        {
          localClass1.close();
          return;
        }
        catch (IOException paramString)
        {
          return;
        }
      }
      catch (SecurityException paramString)
      {
        localObject = localClass2;
        if (this.debug)
        {
          localObject = localClass2;
          pr("DEBUG: " + paramString);
        }
        if (localClass2 == null) {
          continue;
        }
        try
        {
          localClass2.close();
          return;
        }
        catch (IOException paramString)
        {
          return;
        }
      }
      finally
      {
        if (localObject != null) {}
        try
        {
          ((InputStream)localObject).close();
          throw paramString;
        }
        catch (IOException paramClass)
        {
          continue;
        }
      }
      try
      {
        paramClass.close();
        return;
      }
      catch (IOException paramString) {}
      localClass1 = paramClass;
      localClass2 = paramClass;
      localObject = paramClass;
      if (this.debug)
      {
        localClass1 = paramClass;
        localClass2 = paramClass;
        localObject = paramClass;
        pr("DEBUG: not loading resource: " + paramString);
      }
    }
  }
  
  private static InputStream openStream(URL paramURL)
    throws IOException
  {
    try
    {
      paramURL = (InputStream)AccessController.doPrivileged(new PrivilegedExceptionAction()
      {
        public Object run()
          throws IOException
        {
          return Session.this.openStream();
        }
      });
      return paramURL;
    }
    catch (PrivilegedActionException paramURL)
    {
      throw ((IOException)paramURL.getException());
    }
  }
  
  private void pr(String paramString)
  {
    getDebugOut().println(paramString);
  }
  
  public void addProvider(Provider paramProvider)
  {
    try
    {
      this.providers.addElement(paramProvider);
      this.providersByClassName.put(paramProvider.getClassName(), paramProvider);
      if (!this.providersByProtocol.containsKey(paramProvider.getProtocol())) {
        this.providersByProtocol.put(paramProvider.getProtocol(), paramProvider);
      }
      return;
    }
    finally
    {
      paramProvider = finally;
      throw paramProvider;
    }
  }
  
  public boolean getDebug()
  {
    try
    {
      boolean bool = this.debug;
      return bool;
    }
    finally
    {
      localObject = finally;
      throw ((Throwable)localObject);
    }
  }
  
  /* Error */
  public PrintStream getDebugOut()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 490	javax/mail/Session:out	Ljava/io/PrintStream;
    //   6: ifnonnull +11 -> 17
    //   9: getstatic 491	java/lang/System:out	Ljava/io/PrintStream;
    //   12: astore_1
    //   13: aload_0
    //   14: monitorexit
    //   15: aload_1
    //   16: areturn
    //   17: aload_0
    //   18: getfield 490	javax/mail/Session:out	Ljava/io/PrintStream;
    //   21: astore_1
    //   22: goto -9 -> 13
    //   25: astore_1
    //   26: aload_0
    //   27: monitorexit
    //   28: aload_1
    //   29: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	30	0	this	Session
    //   12	10	1	localPrintStream	PrintStream
    //   25	4	1	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   2	13	25	finally
    //   17	22	25	finally
  }
  
  public Folder getFolder(URLName paramURLName)
    throws MessagingException
  {
    Store localStore = getStore(paramURLName);
    localStore.connect();
    return localStore.getFolder(paramURLName);
  }
  
  public PasswordAuthentication getPasswordAuthentication(URLName paramURLName)
  {
    return (PasswordAuthentication)this.authTable.get(paramURLName);
  }
  
  public Properties getProperties()
  {
    return this.props;
  }
  
  public String getProperty(String paramString)
  {
    return this.props.getProperty(paramString);
  }
  
  public Provider getProvider(String paramString)
    throws NoSuchProviderException
  {
    if (paramString != null) {}
    Provider localProvider;
    try
    {
      if (paramString.length() <= 0) {
        throw new NoSuchProviderException("Invalid protocol: null");
      }
    }
    finally
    {
      throw paramString;
      localProvider = null;
      String str = this.props.getProperty("mail." + paramString + ".class");
      if (str != null)
      {
        if (this.debug) {
          pr("DEBUG: mail." + paramString + ".class property exists and points to " + str);
        }
        localProvider = (Provider)this.providersByClassName.get(str);
      }
      if (localProvider != null) {
        return localProvider;
      }
      localProvider = (Provider)this.providersByProtocol.get(paramString);
      if (localProvider == null) {
        throw new NoSuchProviderException("No provider for " + paramString);
      }
      if (!this.debug) {}
    }
  }
  
  public Provider[] getProviders()
  {
    try
    {
      Provider[] arrayOfProvider = new Provider[this.providers.size()];
      this.providers.copyInto(arrayOfProvider);
      return arrayOfProvider;
    }
    finally
    {
      localObject = finally;
      throw ((Throwable)localObject);
    }
  }
  
  public Store getStore()
    throws NoSuchProviderException
  {
    return getStore(getProperty("mail.store.protocol"));
  }
  
  public Store getStore(String paramString)
    throws NoSuchProviderException
  {
    return getStore(new URLName(paramString, null, -1, null, null, null));
  }
  
  public Store getStore(Provider paramProvider)
    throws NoSuchProviderException
  {
    return getStore(paramProvider, null);
  }
  
  public Store getStore(URLName paramURLName)
    throws NoSuchProviderException
  {
    return getStore(getProvider(paramURLName.getProtocol()), paramURLName);
  }
  
  public Transport getTransport()
    throws NoSuchProviderException
  {
    return getTransport(getProperty("mail.transport.protocol"));
  }
  
  public Transport getTransport(String paramString)
    throws NoSuchProviderException
  {
    return getTransport(new URLName(paramString, null, -1, null, null, null));
  }
  
  public Transport getTransport(Address paramAddress)
    throws NoSuchProviderException
  {
    String str = (String)this.addressMap.get(paramAddress.getType());
    if (str == null) {
      throw new NoSuchProviderException("No provider for Address type: " + paramAddress.getType());
    }
    return getTransport(str);
  }
  
  public Transport getTransport(Provider paramProvider)
    throws NoSuchProviderException
  {
    return getTransport(paramProvider, null);
  }
  
  public Transport getTransport(URLName paramURLName)
    throws NoSuchProviderException
  {
    return getTransport(getProvider(paramURLName.getProtocol()), paramURLName);
  }
  
  public PasswordAuthentication requestPasswordAuthentication(InetAddress paramInetAddress, int paramInt, String paramString1, String paramString2, String paramString3)
  {
    if (this.authenticator != null) {
      return this.authenticator.requestPasswordAuthentication(paramInetAddress, paramInt, paramString1, paramString2, paramString3);
    }
    return null;
  }
  
  public void setDebug(boolean paramBoolean)
  {
    try
    {
      this.debug = paramBoolean;
      if (paramBoolean) {
        pr("DEBUG: setDebug: JavaMail version 1.4.1");
      }
      return;
    }
    finally {}
  }
  
  public void setDebugOut(PrintStream paramPrintStream)
  {
    try
    {
      this.out = paramPrintStream;
      return;
    }
    finally
    {
      paramPrintStream = finally;
      throw paramPrintStream;
    }
  }
  
  public void setPasswordAuthentication(URLName paramURLName, PasswordAuthentication paramPasswordAuthentication)
  {
    if (paramPasswordAuthentication == null)
    {
      this.authTable.remove(paramURLName);
      return;
    }
    this.authTable.put(paramURLName, paramPasswordAuthentication);
  }
  
  public void setProtocolForAddress(String paramString1, String paramString2)
  {
    if (paramString2 == null) {}
    for (;;)
    {
      try
      {
        this.addressMap.remove(paramString1);
        return;
      }
      finally {}
      this.addressMap.put(paramString1, paramString2);
    }
  }
  
  public void setProvider(Provider paramProvider)
    throws NoSuchProviderException
  {
    if (paramProvider == null) {
      try
      {
        throw new NoSuchProviderException("Can't set null provider");
      }
      finally {}
    }
    this.providersByProtocol.put(paramProvider.getProtocol(), paramProvider);
    this.props.put("mail." + paramProvider.getProtocol() + ".class", paramProvider.getClassName());
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/javax/mail/Session.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */