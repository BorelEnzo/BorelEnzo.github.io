package myjava.awt.datatransfer;

import java.io.Serializable;
import java.util.Enumeration;
import java.util.Hashtable;

final class MimeTypeProcessor
{
  private static MimeTypeProcessor instance;
  
  static String assemble(MimeType paramMimeType)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramMimeType.getFullType());
    Enumeration localEnumeration = paramMimeType.parameters.keys();
    for (;;)
    {
      if (!localEnumeration.hasMoreElements()) {
        return localStringBuilder.toString();
      }
      String str1 = (String)localEnumeration.nextElement();
      String str2 = (String)paramMimeType.parameters.get(str1);
      localStringBuilder.append("; ");
      localStringBuilder.append(str1);
      localStringBuilder.append("=\"");
      localStringBuilder.append(str2);
      localStringBuilder.append('"');
    }
  }
  
  private static int getNextMeaningfulIndex(String paramString, int paramInt)
  {
    for (;;)
    {
      if ((paramInt >= paramString.length()) || (isMeaningfulChar(paramString.charAt(paramInt)))) {
        return paramInt;
      }
      paramInt += 1;
    }
  }
  
  private static boolean isMeaningfulChar(char paramChar)
  {
    return (paramChar >= '!') && (paramChar <= '~');
  }
  
  private static boolean isTSpecialChar(char paramChar)
  {
    return (paramChar == '(') || (paramChar == ')') || (paramChar == '[') || (paramChar == ']') || (paramChar == '<') || (paramChar == '>') || (paramChar == '@') || (paramChar == ',') || (paramChar == ';') || (paramChar == ':') || (paramChar == '\\') || (paramChar == '"') || (paramChar == '/') || (paramChar == '?') || (paramChar == '=');
  }
  
  static MimeType parse(String paramString)
  {
    if (instance == null) {
      instance = new MimeTypeProcessor();
    }
    MimeType localMimeType = new MimeType();
    if (paramString != null)
    {
      StringPosition localStringPosition = new StringPosition(null);
      retrieveType(paramString, localMimeType, localStringPosition);
      retrieveParams(paramString, localMimeType, localStringPosition);
    }
    return localMimeType;
  }
  
  private static void retrieveParam(String paramString, MimeType paramMimeType, StringPosition paramStringPosition)
  {
    String str = retrieveToken(paramString, paramStringPosition).toLowerCase();
    paramStringPosition.i = getNextMeaningfulIndex(paramString, paramStringPosition.i);
    if ((paramStringPosition.i >= paramString.length()) || (paramString.charAt(paramStringPosition.i) != '=')) {
      throw new IllegalArgumentException();
    }
    paramStringPosition.i += 1;
    paramStringPosition.i = getNextMeaningfulIndex(paramString, paramStringPosition.i);
    if (paramStringPosition.i >= paramString.length()) {
      throw new IllegalArgumentException();
    }
    if (paramString.charAt(paramStringPosition.i) == '"') {}
    for (paramString = retrieveQuoted(paramString, paramStringPosition);; paramString = retrieveToken(paramString, paramStringPosition))
    {
      paramMimeType.parameters.put(str, paramString);
      return;
    }
  }
  
  private static void retrieveParams(String paramString, MimeType paramMimeType, StringPosition paramStringPosition)
  {
    paramMimeType.parameters = new Hashtable();
    paramMimeType.systemParameters = new Hashtable();
    for (;;)
    {
      paramStringPosition.i = getNextMeaningfulIndex(paramString, paramStringPosition.i);
      if (paramStringPosition.i >= paramString.length()) {
        return;
      }
      if (paramString.charAt(paramStringPosition.i) != ';') {
        throw new IllegalArgumentException();
      }
      paramStringPosition.i += 1;
      retrieveParam(paramString, paramMimeType, paramStringPosition);
    }
  }
  
  private static String retrieveQuoted(String paramString, StringPosition paramStringPosition)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 1;
    paramStringPosition.i += 1;
    if ((paramString.charAt(paramStringPosition.i) == '"') && (i != 0))
    {
      paramStringPosition.i += 1;
      return localStringBuilder.toString();
    }
    int j = paramStringPosition.i;
    paramStringPosition.i = (j + 1);
    char c = paramString.charAt(j);
    if (i == 0) {
      i = 1;
    }
    for (;;)
    {
      if (i != 0) {
        localStringBuilder.append(c);
      }
      if (paramStringPosition.i != paramString.length()) {
        break;
      }
      throw new IllegalArgumentException();
      if (c == '\\') {
        i = 0;
      }
    }
  }
  
  private static String retrieveToken(String paramString, StringPosition paramStringPosition)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    paramStringPosition.i = getNextMeaningfulIndex(paramString, paramStringPosition.i);
    if ((paramStringPosition.i >= paramString.length()) || (isTSpecialChar(paramString.charAt(paramStringPosition.i)))) {
      throw new IllegalArgumentException();
    }
    do
    {
      int i = paramStringPosition.i;
      paramStringPosition.i = (i + 1);
      localStringBuilder.append(paramString.charAt(i));
    } while ((paramStringPosition.i < paramString.length()) && (isMeaningfulChar(paramString.charAt(paramStringPosition.i))) && (!isTSpecialChar(paramString.charAt(paramStringPosition.i))));
    return localStringBuilder.toString();
  }
  
  private static void retrieveType(String paramString, MimeType paramMimeType, StringPosition paramStringPosition)
  {
    paramMimeType.primaryType = retrieveToken(paramString, paramStringPosition).toLowerCase();
    paramStringPosition.i = getNextMeaningfulIndex(paramString, paramStringPosition.i);
    if ((paramStringPosition.i >= paramString.length()) || (paramString.charAt(paramStringPosition.i) != '/')) {
      throw new IllegalArgumentException();
    }
    paramStringPosition.i += 1;
    paramMimeType.subType = retrieveToken(paramString, paramStringPosition).toLowerCase();
  }
  
  static final class MimeType
    implements Cloneable, Serializable
  {
    private static final long serialVersionUID = -6693571907475992044L;
    private Hashtable<String, String> parameters;
    private String primaryType;
    private String subType;
    private Hashtable<String, Object> systemParameters;
    
    MimeType()
    {
      this.primaryType = null;
      this.subType = null;
      this.parameters = null;
      this.systemParameters = null;
    }
    
    MimeType(String paramString1, String paramString2)
    {
      this.primaryType = paramString1;
      this.subType = paramString2;
      this.parameters = new Hashtable();
      this.systemParameters = new Hashtable();
    }
    
    void addParameter(String paramString1, String paramString2)
    {
      if (paramString2 == null) {}
      String str;
      do
      {
        return;
        str = paramString2;
        if (paramString2.charAt(0) == '"')
        {
          str = paramString2;
          if (paramString2.charAt(paramString2.length() - 1) == '"') {
            str = paramString2.substring(1, paramString2.length() - 2);
          }
        }
      } while (str.length() == 0);
      this.parameters.put(paramString1, str);
    }
    
    void addSystemParameter(String paramString, Object paramObject)
    {
      this.systemParameters.put(paramString, paramObject);
    }
    
    public Object clone()
    {
      MimeType localMimeType = new MimeType(this.primaryType, this.subType);
      localMimeType.parameters = ((Hashtable)this.parameters.clone());
      localMimeType.systemParameters = ((Hashtable)this.systemParameters.clone());
      return localMimeType;
    }
    
    boolean equals(MimeType paramMimeType)
    {
      if (paramMimeType == null) {
        return false;
      }
      return getFullType().equals(paramMimeType.getFullType());
    }
    
    String getFullType()
    {
      return this.primaryType + "/" + this.subType;
    }
    
    String getParameter(String paramString)
    {
      return (String)this.parameters.get(paramString);
    }
    
    String getPrimaryType()
    {
      return this.primaryType;
    }
    
    String getSubType()
    {
      return this.subType;
    }
    
    Object getSystemParameter(String paramString)
    {
      return this.systemParameters.get(paramString);
    }
    
    void removeParameter(String paramString)
    {
      this.parameters.remove(paramString);
    }
  }
  
  private static final class StringPosition
  {
    int i = 0;
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/myjava/awt/datatransfer/MimeTypeProcessor.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */