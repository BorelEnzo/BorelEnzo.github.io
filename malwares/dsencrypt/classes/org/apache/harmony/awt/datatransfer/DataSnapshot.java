package org.apache.harmony.awt.datatransfer;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.SystemFlavorMap;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class DataSnapshot
  implements DataProvider
{
  private final String[] fileList;
  private final String html;
  private final String[] nativeFormats;
  private final RawBitmap rawBitmap;
  private final Map<Class<?>, byte[]> serializedObjects;
  private final String text;
  private final String url;
  
  public DataSnapshot(DataProvider paramDataProvider)
  {
    this.nativeFormats = paramDataProvider.getNativeFormats();
    this.text = paramDataProvider.getText();
    this.fileList = paramDataProvider.getFileList();
    this.url = paramDataProvider.getURL();
    this.html = paramDataProvider.getHTML();
    this.rawBitmap = paramDataProvider.getRawBitmap();
    this.serializedObjects = Collections.synchronizedMap(new HashMap());
    int i = 0;
    for (;;)
    {
      if (i >= this.nativeFormats.length) {
        return;
      }
      Object localObject1 = null;
      try
      {
        localObject2 = SystemFlavorMap.decodeDataFlavor(this.nativeFormats[i]);
        localObject1 = localObject2;
      }
      catch (ClassNotFoundException localClassNotFoundException)
      {
        Object localObject2;
        for (;;) {}
      }
      if (localObject1 != null)
      {
        localObject1 = ((DataFlavor)localObject1).getRepresentationClass();
        localObject2 = paramDataProvider.getSerializedObject((Class)localObject1);
        if (localObject2 != null) {
          this.serializedObjects.put(localObject1, localObject2);
        }
      }
      i += 1;
    }
  }
  
  public String[] getFileList()
  {
    return this.fileList;
  }
  
  public String getHTML()
  {
    return this.html;
  }
  
  public String[] getNativeFormats()
  {
    return this.nativeFormats;
  }
  
  public RawBitmap getRawBitmap()
  {
    return this.rawBitmap;
  }
  
  public short[] getRawBitmapBuffer16()
  {
    if ((this.rawBitmap != null) && ((this.rawBitmap.buffer instanceof short[]))) {
      return (short[])this.rawBitmap.buffer;
    }
    return null;
  }
  
  public int[] getRawBitmapBuffer32()
  {
    if ((this.rawBitmap != null) && ((this.rawBitmap.buffer instanceof int[]))) {
      return (int[])this.rawBitmap.buffer;
    }
    return null;
  }
  
  public byte[] getRawBitmapBuffer8()
  {
    if ((this.rawBitmap != null) && ((this.rawBitmap.buffer instanceof byte[]))) {
      return (byte[])this.rawBitmap.buffer;
    }
    return null;
  }
  
  public int[] getRawBitmapHeader()
  {
    if (this.rawBitmap != null) {
      return this.rawBitmap.getHeader();
    }
    return null;
  }
  
  public byte[] getSerializedObject(Class<?> paramClass)
  {
    return (byte[])this.serializedObjects.get(paramClass);
  }
  
  public byte[] getSerializedObject(String paramString)
  {
    try
    {
      paramString = getSerializedObject(SystemFlavorMap.decodeDataFlavor(paramString).getRepresentationClass());
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  public String getText()
  {
    return this.text;
  }
  
  public String getURL()
  {
    return this.url;
  }
  
  public boolean isNativeFormatAvailable(String paramString)
  {
    if (paramString == null) {}
    do
    {
      do
      {
        do
        {
          do
          {
            do
            {
              return false;
              if (!paramString.equals("text/plain")) {
                break;
              }
            } while (this.text == null);
            return true;
            if (!paramString.equals("application/x-java-file-list")) {
              break;
            }
          } while (this.fileList == null);
          return true;
          if (!paramString.equals("application/x-java-url")) {
            break;
          }
        } while (this.url == null);
        return true;
        if (!paramString.equals("text/html")) {
          break;
        }
      } while (this.html == null);
      return true;
      if (!paramString.equals("image/x-java-image")) {
        break;
      }
    } while (this.rawBitmap == null);
    return true;
    try
    {
      paramString = SystemFlavorMap.decodeDataFlavor(paramString);
      boolean bool = this.serializedObjects.containsKey(paramString.getRepresentationClass());
      return bool;
    }
    catch (Exception paramString) {}
    return false;
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/org/apache/harmony/awt/datatransfer/DataSnapshot.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */