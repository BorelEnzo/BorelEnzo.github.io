package org.apache.harmony.awt.datatransfer;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DropTargetContext;
import java.awt.dnd.peer.DragSourceContextPeer;
import java.awt.dnd.peer.DropTargetContextPeer;
import java.nio.charset.Charset;
import org.apache.harmony.awt.ContextStorage;
import org.apache.harmony.awt.internal.nls.Messages;
import org.apache.harmony.misc.SystemUtils;

public abstract class DTK
{
  protected final DataTransferThread dataTransferThread = new DataTransferThread(this);
  private NativeClipboard nativeClipboard = null;
  private NativeClipboard nativeSelection = null;
  protected SystemFlavorMap systemFlavorMap;
  
  protected DTK()
  {
    this.dataTransferThread.start();
  }
  
  private static DTK createDTK()
  {
    switch ()
    {
    default: 
      throw new RuntimeException(Messages.getString("awt.4E"));
    }
    for (Object localObject = "org.apache.harmony.awt.datatransfer.windows.WinDTK";; localObject = "org.apache.harmony.awt.datatransfer.linux.LinuxDTK") {
      try
      {
        localObject = (DTK)Class.forName((String)localObject).newInstance();
        return (DTK)localObject;
      }
      catch (Exception localException)
      {
        throw new RuntimeException(localException);
      }
    }
  }
  
  public static DTK getDTK()
  {
    synchronized ()
    {
      if (ContextStorage.shutdownPending()) {
        return null;
      }
      DTK localDTK2 = ContextStorage.getDTK();
      DTK localDTK1 = localDTK2;
      if (localDTK2 == null)
      {
        localDTK1 = createDTK();
        ContextStorage.setDTK(localDTK1);
      }
      return localDTK1;
    }
  }
  
  protected void appendSystemFlavorMap(SystemFlavorMap paramSystemFlavorMap, DataFlavor paramDataFlavor, String paramString)
  {
    paramSystemFlavorMap.addFlavorForUnencodedNative(paramString, paramDataFlavor);
    paramSystemFlavorMap.addUnencodedNativeForFlavor(paramDataFlavor, paramString);
  }
  
  protected void appendSystemFlavorMap(SystemFlavorMap paramSystemFlavorMap, String[] paramArrayOfString, String paramString1, String paramString2)
  {
    TextFlavor.addUnicodeClasses(paramSystemFlavorMap, paramString2, paramString1);
    int i = 0;
    for (;;)
    {
      if (i >= paramArrayOfString.length) {
        return;
      }
      if ((paramArrayOfString[i] != null) && (Charset.isSupported(paramArrayOfString[i]))) {
        TextFlavor.addCharsetClasses(paramSystemFlavorMap, paramString2, paramString1, paramArrayOfString[i]);
      }
      i += 1;
    }
  }
  
  public abstract DragSourceContextPeer createDragSourceContextPeer(DragGestureEvent paramDragGestureEvent);
  
  public abstract DropTargetContextPeer createDropTargetContextPeer(DropTargetContext paramDropTargetContext);
  
  protected String[] getCharsets()
  {
    return new String[] { "UTF-16", "UTF-8", "unicode", "ISO-8859-1", "US-ASCII" };
  }
  
  public String getDefaultCharset()
  {
    return "unicode";
  }
  
  public NativeClipboard getNativeClipboard()
  {
    if (this.nativeClipboard == null) {
      this.nativeClipboard = newNativeClipboard();
    }
    return this.nativeClipboard;
  }
  
  public NativeClipboard getNativeSelection()
  {
    if (this.nativeSelection == null) {
      this.nativeSelection = newNativeSelection();
    }
    return this.nativeSelection;
  }
  
  public SystemFlavorMap getSystemFlavorMap()
  {
    try
    {
      SystemFlavorMap localSystemFlavorMap = this.systemFlavorMap;
      return localSystemFlavorMap;
    }
    finally
    {
      localObject = finally;
      throw ((Throwable)localObject);
    }
  }
  
  public abstract void initDragAndDrop();
  
  public void initSystemFlavorMap(SystemFlavorMap paramSystemFlavorMap)
  {
    String[] arrayOfString = getCharsets();
    appendSystemFlavorMap(paramSystemFlavorMap, DataFlavor.stringFlavor, "text/plain");
    appendSystemFlavorMap(paramSystemFlavorMap, arrayOfString, "plain", "text/plain");
    appendSystemFlavorMap(paramSystemFlavorMap, arrayOfString, "html", "text/html");
    appendSystemFlavorMap(paramSystemFlavorMap, DataProvider.urlFlavor, "application/x-java-url");
    appendSystemFlavorMap(paramSystemFlavorMap, arrayOfString, "uri-list", "application/x-java-url");
    appendSystemFlavorMap(paramSystemFlavorMap, DataFlavor.javaFileListFlavor, "application/x-java-file-list");
    appendSystemFlavorMap(paramSystemFlavorMap, DataFlavor.imageFlavor, "image/x-java-image");
  }
  
  protected abstract NativeClipboard newNativeClipboard();
  
  protected abstract NativeClipboard newNativeSelection();
  
  public abstract void runEventLoop();
  
  public void setSystemFlavorMap(SystemFlavorMap paramSystemFlavorMap)
  {
    try
    {
      this.systemFlavorMap = paramSystemFlavorMap;
      return;
    }
    finally
    {
      paramSystemFlavorMap = finally;
      throw paramSystemFlavorMap;
    }
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/org/apache/harmony/awt/datatransfer/DTK.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */