package org.apache.harmony.awt.datatransfer;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.datatransfer.Transferable;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.awt.image.WritableRaster;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Reader;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DataSource
  implements DataProvider
{
  protected final Transferable contents;
  private DataFlavor[] flavors;
  private List<String> nativeFormats;
  
  public DataSource(Transferable paramTransferable)
  {
    this.contents = paramTransferable;
  }
  
  private RawBitmap getImageBitmap(Image paramImage)
  {
    Graphics localGraphics = null;
    if ((paramImage instanceof BufferedImage))
    {
      localObject = (BufferedImage)paramImage;
      if (((BufferedImage)localObject).getType() == 1) {
        localObject = getImageBitmap32((BufferedImage)localObject);
      }
    }
    int i;
    int j;
    do
    {
      do
      {
        return (RawBitmap)localObject;
        i = paramImage.getWidth(null);
        j = paramImage.getHeight(null);
        localObject = localGraphics;
      } while (i <= 0);
      localObject = localGraphics;
    } while (j <= 0);
    Object localObject = new BufferedImage(i, j, 1);
    localGraphics = ((BufferedImage)localObject).getGraphics();
    localGraphics.drawImage(paramImage, 0, 0, null);
    localGraphics.dispose();
    return getImageBitmap32((BufferedImage)localObject);
  }
  
  private RawBitmap getImageBitmap32(BufferedImage paramBufferedImage)
  {
    int[] arrayOfInt1 = new int[paramBufferedImage.getWidth() * paramBufferedImage.getHeight()];
    DataBufferInt localDataBufferInt = (DataBufferInt)paramBufferedImage.getRaster().getDataBuffer();
    int j = 0;
    int k = localDataBufferInt.getNumBanks();
    int[] arrayOfInt2 = localDataBufferInt.getOffsets();
    int i = 0;
    for (;;)
    {
      if (i >= k) {
        return new RawBitmap(paramBufferedImage.getWidth(), paramBufferedImage.getHeight(), paramBufferedImage.getWidth(), 32, 16711680, 65280, 255, arrayOfInt1);
      }
      int[] arrayOfInt3 = localDataBufferInt.getData(i);
      System.arraycopy(arrayOfInt3, arrayOfInt2[i], arrayOfInt1, j, arrayOfInt3.length - arrayOfInt2[i]);
      j += arrayOfInt3.length - arrayOfInt2[i];
      i += 1;
    }
  }
  
  private static List<String> getNativesForFlavors(DataFlavor[] paramArrayOfDataFlavor)
  {
    ArrayList localArrayList = new ArrayList();
    SystemFlavorMap localSystemFlavorMap = (SystemFlavorMap)SystemFlavorMap.getDefaultFlavorMap();
    int i = 0;
    if (i >= paramArrayOfDataFlavor.length) {
      return localArrayList;
    }
    Iterator localIterator = localSystemFlavorMap.getNativesForFlavor(paramArrayOfDataFlavor[i]).iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        i += 1;
        break;
      }
      String str = (String)localIterator.next();
      if (!localArrayList.contains(str)) {
        localArrayList.add(str);
      }
    }
  }
  
  private String getText(boolean paramBoolean)
  {
    DataFlavor[] arrayOfDataFlavor = this.contents.getTransferDataFlavors();
    int i = 0;
    if (i >= arrayOfDataFlavor.length) {
      return null;
    }
    Object localObject = arrayOfDataFlavor[i];
    if (!((DataFlavor)localObject).isFlavorTextType()) {}
    for (;;)
    {
      i += 1;
      break;
      if ((!paramBoolean) || (isHtmlFlavor((DataFlavor)localObject))) {
        try
        {
          if (String.class.isAssignableFrom(((DataFlavor)localObject).getRepresentationClass())) {
            return (String)this.contents.getTransferData((DataFlavor)localObject);
          }
          localObject = getTextFromReader(((DataFlavor)localObject).getReaderForText(this.contents));
          return (String)localObject;
        }
        catch (Exception localException) {}
      }
    }
  }
  
  private String getTextFromReader(Reader paramReader)
    throws IOException
  {
    StringBuilder localStringBuilder = new StringBuilder();
    char[] arrayOfChar = new char['Ð€'];
    for (;;)
    {
      int i = paramReader.read(arrayOfChar);
      if (i <= 0) {
        return localStringBuilder.toString();
      }
      localStringBuilder.append(arrayOfChar, 0, i);
    }
  }
  
  private boolean isHtmlFlavor(DataFlavor paramDataFlavor)
  {
    return "html".equalsIgnoreCase(paramDataFlavor.getSubType());
  }
  
  protected DataFlavor[] getDataFlavors()
  {
    if (this.flavors == null) {
      this.flavors = this.contents.getTransferDataFlavors();
    }
    return this.flavors;
  }
  
  public String[] getFileList()
  {
    try
    {
      Object localObject = (List)this.contents.getTransferData(DataFlavor.javaFileListFlavor);
      localObject = (String[])((List)localObject).toArray(new String[((List)localObject).size()]);
      return (String[])localObject;
    }
    catch (Exception localException) {}
    return null;
  }
  
  public String getHTML()
  {
    return getText(true);
  }
  
  public String[] getNativeFormats()
  {
    return (String[])getNativeFormatsList().toArray(new String[0]);
  }
  
  public List<String> getNativeFormatsList()
  {
    if (this.nativeFormats == null) {
      this.nativeFormats = getNativesForFlavors(getDataFlavors());
    }
    return this.nativeFormats;
  }
  
  public RawBitmap getRawBitmap()
  {
    DataFlavor[] arrayOfDataFlavor = this.contents.getTransferDataFlavors();
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfDataFlavor.length) {
        return null;
      }
      Object localObject = arrayOfDataFlavor[i];
      Class localClass = ((DataFlavor)localObject).getRepresentationClass();
      if ((localClass != null) && (Image.class.isAssignableFrom(localClass)) && ((((DataFlavor)localObject).isMimeTypeEqual(DataFlavor.imageFlavor)) || (((DataFlavor)localObject).isFlavorSerializedObjectType()))) {
        try
        {
          localObject = getImageBitmap((Image)this.contents.getTransferData((DataFlavor)localObject));
          return (RawBitmap)localObject;
        }
        catch (Throwable localThrowable) {}
      }
      i += 1;
    }
  }
  
  public byte[] getSerializedObject(Class<?> paramClass)
  {
    try
    {
      paramClass = new DataFlavor(paramClass, null);
      paramClass = (Serializable)this.contents.getTransferData(paramClass);
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      new ObjectOutputStream(localByteArrayOutputStream).writeObject(paramClass);
      paramClass = localByteArrayOutputStream.toByteArray();
      return paramClass;
    }
    catch (Throwable paramClass) {}
    return null;
  }
  
  public String getText()
  {
    return getText(false);
  }
  
  public String getURL()
  {
    try
    {
      String str1 = ((URL)this.contents.getTransferData(urlFlavor)).toString();
      return str1;
    }
    catch (Exception localException1)
    {
      try
      {
        String str2 = ((URL)this.contents.getTransferData(uriFlavor)).toString();
        return str2;
      }
      catch (Exception localException2)
      {
        try
        {
          String str3 = new URL(getText()).toString();
          return str3;
        }
        catch (Exception localException3) {}
      }
    }
    return null;
  }
  
  public boolean isNativeFormatAvailable(String paramString)
  {
    return getNativeFormatsList().contains(paramString);
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/org/apache/harmony/awt/datatransfer/DataSource.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */