package org.apache.harmony.awt.datatransfer;

import java.awt.Image;
import java.awt.color.ColorSpace;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBufferByte;
import java.awt.image.DataBufferInt;
import java.awt.image.DataBufferUShort;
import java.awt.image.DirectColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.apache.harmony.awt.internal.nls.Messages;

public final class DataProxy
  implements Transferable
{
  public static final Class[] charsetTextClasses = { byte[].class, ByteBuffer.class, InputStream.class };
  public static final Class[] unicodeTextClasses = { String.class, Reader.class, CharBuffer.class, char[].class };
  private final DataProvider data;
  private final SystemFlavorMap flavorMap;
  
  public DataProxy(DataProvider paramDataProvider)
  {
    this.data = paramDataProvider;
    this.flavorMap = ((SystemFlavorMap)SystemFlavorMap.getDefaultFlavorMap());
  }
  
  private BufferedImage createBufferedImage(RawBitmap paramRawBitmap)
  {
    if ((paramRawBitmap == null) || (paramRawBitmap.buffer == null) || (paramRawBitmap.width <= 0) || (paramRawBitmap.height <= 0)) {
      return null;
    }
    byte[] arrayOfByte = null;
    Object localObject3 = null;
    int i;
    int j;
    int k;
    Object localObject2;
    Object localObject1;
    if ((paramRawBitmap.bits == 32) && ((paramRawBitmap.buffer instanceof int[])))
    {
      if ((!isRGB(paramRawBitmap)) && (!isBGR(paramRawBitmap))) {
        return null;
      }
      i = paramRawBitmap.rMask;
      j = paramRawBitmap.gMask;
      k = paramRawBitmap.bMask;
      localObject2 = (int[])paramRawBitmap.buffer;
      localObject1 = new DirectColorModel(24, paramRawBitmap.rMask, paramRawBitmap.gMask, paramRawBitmap.bMask);
      localObject2 = Raster.createPackedRaster(new DataBufferInt((int[])localObject2, localObject2.length), paramRawBitmap.width, paramRawBitmap.height, paramRawBitmap.stride, new int[] { i, j, k }, null);
    }
    while ((localObject1 == null) || (localObject2 == null))
    {
      return null;
      if ((paramRawBitmap.bits == 24) && ((paramRawBitmap.buffer instanceof byte[])))
      {
        if (isRGB(paramRawBitmap))
        {
          localObject1 = new int[3];
          localObject1[1] = 1;
          localObject1[2] = 2;
        }
        for (;;)
        {
          arrayOfByte = (byte[])paramRawBitmap.buffer;
          localObject2 = new ComponentColorModel(ColorSpace.getInstance(1000), new int[] { 8, 8, 8 }, false, false, 1, 0);
          paramRawBitmap = Raster.createInterleavedRaster(new DataBufferByte(arrayOfByte, arrayOfByte.length), paramRawBitmap.width, paramRawBitmap.height, paramRawBitmap.stride, 3, (int[])localObject1, null);
          localObject1 = localObject2;
          localObject2 = paramRawBitmap;
          break;
          if (!isBGR(paramRawBitmap)) {
            break label332;
          }
          localObject1 = new int[3];
          localObject1[0] = 2;
          localObject1[1] = 1;
        }
        label332:
        return null;
      }
      if (paramRawBitmap.bits != 16)
      {
        localObject1 = arrayOfByte;
        localObject2 = localObject3;
        if (paramRawBitmap.bits != 15) {}
      }
      else
      {
        localObject1 = arrayOfByte;
        localObject2 = localObject3;
        if ((paramRawBitmap.buffer instanceof short[]))
        {
          i = paramRawBitmap.rMask;
          j = paramRawBitmap.gMask;
          k = paramRawBitmap.bMask;
          localObject2 = (short[])paramRawBitmap.buffer;
          localObject1 = new DirectColorModel(paramRawBitmap.bits, paramRawBitmap.rMask, paramRawBitmap.gMask, paramRawBitmap.bMask);
          localObject2 = Raster.createPackedRaster(new DataBufferUShort((short[])localObject2, localObject2.length), paramRawBitmap.width, paramRawBitmap.height, paramRawBitmap.stride, new int[] { i, j, k }, null);
        }
      }
    }
    return new BufferedImage((ColorModel)localObject1, (WritableRaster)localObject2, false, null);
  }
  
  private String getCharset(DataFlavor paramDataFlavor)
  {
    return paramDataFlavor.getParameter("charset");
  }
  
  private Object getFileList(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    if (!this.data.isNativeFormatAvailable("application/x-java-file-list")) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    paramDataFlavor = this.data.getFileList();
    if (paramDataFlavor == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    return Arrays.asList(paramDataFlavor);
  }
  
  private Object getHTML(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    if (!this.data.isNativeFormatAvailable("text/html")) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    String str = this.data.getHTML();
    if (str == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    return getTextRepresentation(str, paramDataFlavor);
  }
  
  private Image getImage(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    if (!this.data.isNativeFormatAvailable("image/x-java-image")) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    paramDataFlavor = this.data.getRawBitmap();
    if (paramDataFlavor == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    return createBufferedImage(paramDataFlavor);
  }
  
  private Object getPlainText(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    if (!this.data.isNativeFormatAvailable("text/plain")) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    String str = this.data.getText();
    if (str == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    return getTextRepresentation(str, paramDataFlavor);
  }
  
  private Object getSerializedObject(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    String str = SystemFlavorMap.encodeDataFlavor(paramDataFlavor);
    if ((str == null) || (!this.data.isNativeFormatAvailable(str))) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    paramDataFlavor = this.data.getSerializedObject(paramDataFlavor.getRepresentationClass());
    if (paramDataFlavor == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    paramDataFlavor = new ByteArrayInputStream(paramDataFlavor);
    try
    {
      paramDataFlavor = new ObjectInputStream(paramDataFlavor).readObject();
      return paramDataFlavor;
    }
    catch (ClassNotFoundException paramDataFlavor)
    {
      throw new IOException(paramDataFlavor.getMessage());
    }
  }
  
  private Object getTextRepresentation(String paramString, DataFlavor paramDataFlavor)
    throws UnsupportedFlavorException, IOException
  {
    if (paramDataFlavor.getRepresentationClass() == String.class) {
      return paramString;
    }
    if (paramDataFlavor.isRepresentationClassReader()) {
      return new StringReader(paramString);
    }
    if (paramDataFlavor.isRepresentationClassCharBuffer()) {
      return CharBuffer.wrap(paramString);
    }
    if (paramDataFlavor.getRepresentationClass() == char[].class)
    {
      paramDataFlavor = new char[paramString.length()];
      paramString.getChars(0, paramString.length(), paramDataFlavor, 0);
      return paramDataFlavor;
    }
    String str = getCharset(paramDataFlavor);
    if (paramDataFlavor.getRepresentationClass() == byte[].class) {
      return paramString.getBytes(str);
    }
    if (paramDataFlavor.isRepresentationClassByteBuffer()) {
      return ByteBuffer.wrap(paramString.getBytes(str));
    }
    if (paramDataFlavor.isRepresentationClassInputStream()) {
      return new ByteArrayInputStream(paramString.getBytes(str));
    }
    throw new UnsupportedFlavorException(paramDataFlavor);
  }
  
  private Object getURL(DataFlavor paramDataFlavor)
    throws IOException, UnsupportedFlavorException
  {
    if (!this.data.isNativeFormatAvailable("application/x-java-url")) {
      throw new UnsupportedFlavorException(paramDataFlavor);
    }
    Object localObject = this.data.getURL();
    if (localObject == null) {
      throw new IOException(Messages.getString("awt.4F"));
    }
    localObject = new URL((String)localObject);
    if (paramDataFlavor.getRepresentationClass().isAssignableFrom(URL.class)) {
      return localObject;
    }
    if (paramDataFlavor.isFlavorTextType()) {
      return getTextRepresentation(((URL)localObject).toString(), paramDataFlavor);
    }
    throw new UnsupportedFlavorException(paramDataFlavor);
  }
  
  private boolean isBGR(RawBitmap paramRawBitmap)
  {
    return (paramRawBitmap.rMask == 255) && (paramRawBitmap.gMask == 65280) && (paramRawBitmap.bMask == 16711680);
  }
  
  private boolean isRGB(RawBitmap paramRawBitmap)
  {
    return (paramRawBitmap.rMask == 16711680) && (paramRawBitmap.gMask == 65280) && (paramRawBitmap.bMask == 255);
  }
  
  public DataProvider getDataProvider()
  {
    return this.data;
  }
  
  public Object getTransferData(DataFlavor paramDataFlavor)
    throws UnsupportedFlavorException, IOException
  {
    String str = paramDataFlavor.getPrimaryType() + "/" + paramDataFlavor.getSubType();
    if (paramDataFlavor.isFlavorTextType())
    {
      if (str.equalsIgnoreCase("text/html")) {
        return getHTML(paramDataFlavor);
      }
      if (str.equalsIgnoreCase("text/uri-list")) {
        return getURL(paramDataFlavor);
      }
      return getPlainText(paramDataFlavor);
    }
    if (paramDataFlavor.isFlavorJavaFileListType()) {
      return getFileList(paramDataFlavor);
    }
    if (paramDataFlavor.isFlavorSerializedObjectType()) {
      return getSerializedObject(paramDataFlavor);
    }
    if (paramDataFlavor.equals(DataProvider.urlFlavor)) {
      return getURL(paramDataFlavor);
    }
    if ((str.equalsIgnoreCase("image/x-java-image")) && (Image.class.isAssignableFrom(paramDataFlavor.getRepresentationClass()))) {
      return getImage(paramDataFlavor);
    }
    throw new UnsupportedFlavorException(paramDataFlavor);
  }
  
  public DataFlavor[] getTransferDataFlavors()
  {
    ArrayList localArrayList = new ArrayList();
    String[] arrayOfString = this.data.getNativeFormats();
    int i = 0;
    if (i >= arrayOfString.length) {
      return (DataFlavor[])localArrayList.toArray(new DataFlavor[localArrayList.size()]);
    }
    Iterator localIterator = this.flavorMap.getFlavorsForNative(arrayOfString[i]).iterator();
    for (;;)
    {
      if (!localIterator.hasNext())
      {
        i += 1;
        break;
      }
      DataFlavor localDataFlavor = (DataFlavor)localIterator.next();
      if (!localArrayList.contains(localDataFlavor)) {
        localArrayList.add(localDataFlavor);
      }
    }
  }
  
  public boolean isDataFlavorSupported(DataFlavor paramDataFlavor)
  {
    DataFlavor[] arrayOfDataFlavor = getTransferDataFlavors();
    int i = 0;
    for (;;)
    {
      if (i >= arrayOfDataFlavor.length) {
        return false;
      }
      if (arrayOfDataFlavor[i].equals(paramDataFlavor)) {
        return true;
      }
      i += 1;
    }
  }
}


/* Location:              /home/enzo/Documents/BorelEnzo.github.io/malwares/dsencrypt/classes.jar!/org/apache/harmony/awt/datatransfer/DataProxy.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */